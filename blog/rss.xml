<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[omnomnomelq - helq's blog]]></title><description><![CDATA[i'm a subtitle!]]></description><link>https://helq.github.io/</link><generator>metalsmith-feed</generator><lastBuildDate>Wed, 29 Sep 2021 21:04:29 GMT</lastBuildDate><atom:link href="https://helq.github.io/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Improvisionando 3]]></title><description><![CDATA[<p>Querida madrecita, que me has manteteninini, hay cosos que ya hombre no haber, hubiera,
habría comido. Es que tal veces, dos cuartos de un cereberole pensativando encontrarón lo
quo hubo pasusu. ¿Cuántes años vos vozes voceando tu tal vez? No, nunca, jamés haber yo.
Te mamo, te quaro, te—no podríe decirto—dolor, mi alma limpia estuviera. Érase una
margarita, cuyo hoja conocíesencia, mamí por qué mi ahorongutan en lo profundo de
comercio. Talu vezo, besándose gustaría, uno, dos, trenita-tres, corasoso en la caaaaasa
de corral. Entre tantísisisisimisimisiso, mentalmente hallé numerosas idiologocas; como
pedagococos, y paracaídos, paramontados, parsimoniosos por así decido. Nomotoso, moma,
mamo, momo, mamaaaista. Devorándosca me padentro, por pafuera sólo vacicolmo veo. Creo
ello, testeo, en corraleo dos campanototitas golpean mías. Las entrepiernos. ¿Cuándo no
podré acabar desto? Ahorista mesto, solamante dirá yo mis palabroñas suficientes nunca
serán.</p>
]]></description><link>https://helq.github.io/blog/posts/2021/09/es/improvisionando-3</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2021/09/es/improvisionando-3</guid><pubDate>Wed, 29 Sep 2021 21:00:00 GMT</pubDate></item><item><title><![CDATA[Microficciones]]></title><description><![CDATA[<p>[Puedes saltar el preámbulo un poco instrospectivo (dos parágrafos) y leer las
microficciones en la parte de abajo. La primera se llama &quot;compañía&quot;.]</p>
<p>Hace un poco más dos años me dije a mí mismo: &quot;mí mismo tienes que dejar de pensar que
quieres escribir algo y más bien ponte a escribirlo de una vez&quot;. Bueno, en realidad no fui
yo el qué me dijera eso por primera vez. Yo ya le había comentado a alguien más que tenía
ganas de escribir. Le había comentado a esa persona, no sólo en una ocasión, sino en muchas.
Así que cuando le dijé una vez más que tenía ganas de escribir algo distinto, algo
entretenido, algo que saliera de mi alma, me refunñó: &quot;bueno, vale, sabes lo que tienes
que hacer? Dejar de decir que quieres escribir y ponte más bien a escribir ya, carajo!&quot;.
Ella tenía toda la razón, debía ponerme a escribir en vez de andar pensando que quería, o
peor andar diciéndole a la gente que <em>quiero escribir</em>. La verdad es que era un tema de
conversación que ponía en la mesa porque no era capaz de pensar en nada más, culpa de mi
ineptitud social supongo, pero esa es otra historia.</p>
<p>Hace un poco menos de dos años me inscribí a un curso de escritura creativa. No tenía ni
idea de qué se iba a tratar, como en casi todo lo que me he metido, y resultó en una
experiencia muy formativa. Habían personas que no sabían escribir casi nada y otros que me
hacían sentir como una ameba. En dicho taller tuvimos cerca de ocho ejercicios de
escritura. Presento aquí una serie de microficciones que escribí como parte de
una tarea para el curso.</p>
<hr>
<p>Cada microficción está compuesta de: un título y la historia como tal.</p>
<hr>
<h2>Compañía</h2>
<p>Sentado o parado en transmilenio, en el SITP, o caminando por la calle. No importa el
lugar, difícilmente me libro de la gente. Por todos lados hay gente. En el suelo, o de
pie pidiendo plata, hablando por teléfono, o <em>whasapeando</em> con un amigo del
trabajo. ¡No más! No lo soporto, quiero llegar a casa y descansar de todo este
alboroto. En casa, tengo tranquilidad, silencio, soledad. Mi soledad, vaya si te
quiero. Sólo si hablaras un poco más o chatearas conmigo. Soledad, te odio, te pegas
como garrapata a mí, y no sé por qué o cómo, si hay otros 8 millones en la ciudad.</p>
<hr>
<h2>10 tipos</h2>
<p>Hay 10 tipos de personas: los que saben binario, los que saben decimal, los que piensan
que este era un chiste sobre sistemas numéricos, los que no saben a dónde va esto, los que
estan cansados de este meme nerd, y los que no saben contar.</p>
<hr>
<h2>La pared</h2>
<p>Primero los cimientos, luego las paredes y por último el techo. Ya todo está listo,
ahora sí puedo romper la cuarta pared.</p>
<hr>
<h2>Extintos</h2>
<p>“Mentira, vil mentira. Los dinosaurios se extinguieron y nunca vovlverán” gritaba
Alfredo mientras que lo desgarraba el águila a pedazos.</p>
<hr>
<h2>Promoción del día</h2>
<p>Contacto a aliens. 2x1</p>
<hr>
<h2>Promoción</h2>
<p>¡Compra ahora! 20% de descuento para las parejas con niños menores de 5 años. Antártica
Occidental se enorgullece de tenerte, ingeniero, médico, biólogo, investigador,
campesino. ¡Tenemos trabajo para tí! Si posees conocimiento práctico y crees que podemos
hacer una mejor civilización compra ya. Estamos construyendo el mundo del mañana, hoy.
Todo lo que tienes que hacer es comprar un apartamento, ¡pero ya! No pierdas esta
oportunidad de tener vivir en la zona metropolitana de Nueva Primavera.</p>
<hr>
<h2>Nueva</h2>
<p>Cocacola Null. Ahora sin agua.</p>
<hr>
<h2>Reglas</h2>
<p>hay muchas. Que use bien los signos de puntuación Que no olvide las tildes ni las
mayusculas que tenga buena ortografia pero por sobre todo ke la istoria tenga un buen</p>
<hr>
<h2>Nueva Recharged</h2>
<p>Cocacola Negativa. Ahora sin protones.</p>
<hr>
<h2>Saliendo del clóset</h2>
<p>Mamá. Papá. Tengo algo que contarles.</p>
<p>Vamos, dínoslo hijo. Sabes que te apoyamos en todo.</p>
<p>Bueno, es un poco difícil de decir, …, pero es que soy abstemio.</p>
<p>¡¿Qué?! ¿Cómo es esto posible? ¿Qué hecho yo para merecer esto? ¿No por nada he tomado
cerveza en casa desde que eras pequeño?</p>
<p>Lo sé, pero es que no puedo con el alcohol.</p>
<p>Vamos hijo, nadie lo hace por el alcohol es cuestion del sabor.</p>
<p>¿El sabor? ¡Pero si es horrible! Es asqueroso.</p>
<p>Tú no eres hijo mío. No puedo creerlo, sabes que fuiste concebido gracias a la cerveza.</p>
<p>Vamos papá. No, no me echen. No me obliguen.</p>
<p>Vete de esta casa y no vuelvas hasta que no seas un maldito alcohólico.</p>
<hr>
<h2>Cáncer</h2>
<p>El día de hoy será como todos los otros. Encontrarás comida sin problemas, venceras a tus
vecinos y te dividiras 10 veces más.</p>
<hr>
<h2>El ratón disfrutaba del maiz cuando llegó el gato</h2>
<p>Fin.</p>
<hr>
<h2>Todo texto es una autobiografía</h2>
<p>Inicié este párrafo pesando que escribiría algo nunca antes visto pero ahora no sé ní como
terminarlo.</p>
<hr>
<h2>Historia de terror</h2>
<p>.cenaba nos malvada bruja La</p>
<hr>
<h2>Terapia</h2>
<p>(1)—¡Hola a todos! Yo soy, aamm…</p>
<p>(2)—¿Eres Aamm…?</p>
<p>(Todos)—¡Hola Aamm!</p>
<p>(2)—…</p>
<p>(3)—¡Hola! Yo soy Pedro.</p>
<p>(Todos)—¡Hola Pedro!</p>
<p>(4)—¡Hola a todos! Yo soy Vanesa.</p>
<p>(Todos)—¡Hola Vanesa!</p>
<p>(2)—Hola. Yo soy… Esperen, ¿soy yo la única que no puede creer que él se llama Aamm?
Lo que yo creo que pasa, y me corrigen si me equivoco, es que él no finalizó su
introducción. ¿Por qué no empezamos de nuevo?</p>
<p>(Todos)—¡Hola Esperen-Soy-Yo-La-Única-Que-No-Puede-Creer-Que-Él-Se-Llama-Aamm-Lo-Que-Yo-Creo-Que-Pasa-Y-me-Corrigen-Si-Me-Equivoco-Es-Que-Él-No-Finalizó-Su-Introducción-Por-Qué-No-Empezamos-De-Nuevo!</p>
<p>(5)—¡Hola a todos! Yo me llamo El Fin.</p>
<p>(Todos)—¡Hola El-Fin!</p>
<hr>
<h2>Nueva Cocacola</h2>
<p>¡Nueva edición! Envíen ayuda! estoy atrapado en una fábrica en indonesia</p>
<hr>
<h2>Extinsion Masiva</h2>
<p>Estaba con Fransi en la playa de alta Groenlandia, cuando este chico super guapo se me
acercó, ¡traía hasta mascota! O sea, era perfecto. Cuando nos pusimos ha hablar me di
cuenta de que era uno de esos malcriados del polo sur. ¡Horrible! Imaginate el descaro del
tipillo cuando me pidió una muestra de mi pelo, como si yo le regalara mi ADN a cualquier
aparecido. Si no hubiera sido por Margi, no se que hubiera hecho. Ella sabe como tratar a
los de su clase. Le ofreció 30 litros de agua potable y se retiró contento el desgraciado.</p>
<hr>
<h2>Nuevo Mundo</h2>
<p>Las extinciones masivas están sobrevaloradas. Después de toda extinsión masiva siempre hay
un resugimiento de vida dado que todos nichos están vacíos y en espera de ser
re-colonizados.</p>
<p>Ok, entiendo señor presidente, pero por favor no oprima el botón.</p>
<hr>
<h2>Apocalipsis</h2>
<p>Debo decir que estoy un poco descepcionado, esperaba algo impresionante, esperaba a los
ángeles de la muerte descendiendo del cielo que se derrumbaba, ó una pelea épica contra
las máquinas quienes quisieran dominar la galaxia. Pero no, el final no tiene prisa por
llegar, incluso pareciera que disfrutara de su desgraciada, suave y tormentosa lentitud.</p>
<hr>
<h2>Un Nuevo Comienzo</h2>
<p>Un pequeño paso para las mujeres, pero un gran salto para la Marcianidad.</p>
<hr>
<h2>Número Uno</h2>
<p>La tierra quería ser <em>cool</em>, así que se consiguió una luna. Marte que ya no estaba para
esas niñerías decidió revelarse y oxidarse. La tierra no se hiba a quedar atrás, y decidió
arder también. Así fue como decidió crear a los humanos.</p>
<hr>
<h2>Adultez</h2>
<p>—Pero me dijiste que me amabas, ¿por qué no me puedo quedar contigo?</p>
<p>—No aportas nada para la casa. ¡Vivir cuesta! Vé y busca trabajo.</p>
<p>—Pero mamí, no puedo trabajar.</p>
<p>—¡Suficientes excusas! Un muchacho como tú debería ser independiente a los 12.</p>
<hr>
<h2>Útiles</h2>
<p>Los humanos tienen muy mala reputación, pero son esenciales para limpiar planetas.</p>
<hr>
<h2>Una Aventura Espacial</h2>
<p>—Comandante. Vamos al 99.99% de la velocidad de la luz. Es imposible alcanzarlos. No
hay suficiente energia en la nave para llevarnos más rápido. Este es el fin comandante. No
lo lograrémos.</p>
<p>—No te preocupes, tenemos de nuestra parte una ventaja increíble, un guión mal escrito.
De seguro ganaremos.</p>
<hr>
<p>(Una historia “bonus” que se me ocurrió el 2 de Sept. 2020)</p>
<h2>Autocontenido</h2>
<p>¡No me leas!</p>
<p>Demonios, ya qué.</p>
]]></description><link>https://helq.github.io/blog/posts/2021/04/es/microficciones</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2021/04/es/microficciones</guid><pubDate>Tue, 13 Apr 2021 21:37:00 GMT</pubDate></item><item><title><![CDATA[Improvisioning 2]]></title><description><![CDATA[<p><em>My hour of fiction writing today has been reduced to a couple of minutes. I had to
organise my thoughts first and that took 50 minutes. After that, now, I feel I am better
situated to confront my writing hour, I hope.</em></p>
<p>So, I’m hungry.</p>
<p>I am very hungry.</p>
<p>Hunger, hungry, the hangry hungery hungering hunger of my humble interior body.</p>
<p>My stomach screams.</p>
<p>It does. It doesn’t do it in a rhythm.</p>
<p>Why should it?</p>
<p>It is mostly a separate system from that of my brain. That thing that is coming up with
this words. Supposedly, apparently, maybely.</p>
<p>Anywayly, brains are weird.</p>
<p>Mine is a brain, or isn’t it?</p>
<p>Am I a brain? Or am I an octopus that thinks that it is only a brain?</p>
<p>What is a brain anyway?</p>
<p>It is a lie. It is just the interconnection of things that fight for space.</p>
<p>If it were to be cut into sections that don’t speak to one another, my brainly, brainful,
braintest brain, would not be <em>a</em> thing, but it would come apart as the multitude of
partishes, that it partingly, parted is.</p>
<p>Hum, rhymes or those words that appear as the counsiouness of my brain fades and I, the
brain, my brain, a brain, a collection of parts, an illusion, an abstract concept in the
sea of ideas and the physical thing that nobody understands, yet, not completely, comes up
with stuff.</p>
<p>It creates, me creates, they creates, thou creates, we create words. My multitude, your
multitude, your rythmical, atypical, topical, and subtropical, chemical and philosophycal,
builds upon and thereupon the things that I couldn’t muster before.</p>
<p>Art? Poetry? What are they?</p>
<p>Do I understand that words carry not only meaning but emotions and that stories are just
one expression of what it means to be a tentacled creature in the middle of the ocean of
knowledge and predators?</p>
<p>Work, job, a life, the pressures. They, they do exist though.</p>
<p>I can’t escape them.</p>
<p>They are final.</p>
<p>They are fixed.</p>
<p>They are not what this is about but they are the end of everything.</p>
<p>The creativity, once a primal force, fades away and a structured sentence, a simple,
polished sentence, comes in the end to stop it all, to signal the repetition of
nothingness, and to slowly dry up my underwater house, leaving only but tedious chores to
be done again and again.</p>
<p>I should go to work.</p>
]]></description><link>https://helq.github.io/blog/posts/2020/10/en/improvisioning-2</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2020/10/en/improvisioning-2</guid><pubDate>Fri, 23 Oct 2020 16:14:00 GMT</pubDate></item><item><title><![CDATA[Improvisionando 1]]></title><description><![CDATA[<p>Cuando la ví pensé que era una ilusión. La camioneta más pequeña que había visto en mi
vida. Pequeña, diminuta, sólo apta para hormigas y nada más. ¿A quién se le ocurrió la
idea de construir una camioneta que sólo insectos pudieran conducir? Ni idea, pero quién
sea, pero se ha hecho multimillonario. Es absurdo, bastante absurdo, pero estos animalitos
han entrado al mundo del capitalismo y deberíamos temer por el impacto que puedan tener en
el ambiente. Aún así nadie parece prestarles atención. ¿Qué podrían hacer unos animalitos
tan insignificantemente pequeños y míseros como ellos? Pues, no sé, ¿contaminar el planeta
con más CO2?, ¿deforestar lo poco que nos queda?, ¿competir por recursos? No, nada de eso
interesa. La oportunidad económica es muy grande, y además está la naciente clase media de
entre las hormigas.  El sistema económico que ellas tienen es muy distinto al nuestro.
Ellas no tienen hijos por si mismas, sólo la reina puede, así que los bienes se pasan de
amigas en amigas. Un sistema social-capitalista de lo más adecuado para nuestro siglo.
Algunos ya han pegado el grito en el cielo. No es posible que esos animalitos tengas los
mismos derechos que nosotros los mamiferos, es ridículo que una hormiga sea capaz de
comprar lo mismo que un perro, o un hombre de ojalata. Ridículo, doblemente absurdo, y
además ¿quién ha pensado en los niños? ¡Los niños creerán que todas las especies son
iguales! ¿Qué clase de basófia es esa? Paren este tren, camión, carro, bagoneta, jacusi
andante, ¡me quiero bajar! Quiero volver al tiempo en que podía salir y pisar el césped
sin que me denunciáran. ¿Qué he matado una familia entera de zancudos? ¿¡Y Qué han hecho
ellos por mí!?</p>
]]></description><link>https://helq.github.io/blog/posts/2020/10/es/improvisionando-1</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2020/10/es/improvisionando-1</guid><pubDate>Fri, 16 Oct 2020 19:20:00 GMT</pubDate></item><item><title><![CDATA[Understanding Higher Rank Polymorphism: A small guide using Typed Lambda Calculus]]></title><description><![CDATA[<p><strong>Disclaimer:</strong> I’m not an expert on type systems. I was just trying to figure out what
“higher rank polymorphism” means and found useful to use some ad-hoc Typed Lambda
Calculus.  For what I’ve been reading for the last hour, all “code” below is in something
close to “System F” (<a href="https://en.wikipedia.org/wiki/System_F">wikipedia</a>, and <a href="https://crypto.stanford.edu/~blynn/lambda/systemf.html">an in-depth explanation of System F with an
interpreter and actual runnable code</a>).</p>
<!--Note to self: Actually. After a couple of years and some weeks studying lambda
calculus I came to understand that the lambda calculus variant used in this document is:
λ2 . You can read more about it in here: https://en.wikipedia.org/wiki/Lambda_cube#(%CE%BB2)_System_F -->
<p>As I understand, Typed Lambda Calculus is the basis of Haskell, so it makes sense to try
to understand what something means in Haskell by studying it first in Typed Lambda
Calculus. That is why, I have written this little guide to understand “Higher Rank
Polymorphism” using Typed Lambda Calculus.</p>
<p>For those of you who don’t know what Lambda Calculus is, I’ve written a micro-introduction
below. If you know what Lambda Calculus is, jump ahead to the Typed Lambda Calculus
Explanation section.</p>
<h2>Lambda Calculus</h2>
<p>In the 1920’s, at the same time that Turing was formulating his &quot;Turing Machine&quot;, another
guy called <a href="https://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a> (a friend of Turing) was also working in the problem of
computability. Alonzo formulated what we know now as lambda calculus. Church and Turing
proved that both formulations were equivalent, meaning that anything you can do with a
Turing Machine can be done with Lambda Calculus. Basically, Haskell and C have the same
power to compute anything<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p>
<p>In Lambda Calculus we have terms. Terms are:</p>
<ul>
<li><p><strong>Variables</strong>. They are denoted by single characters, e.g., <code>x</code>, <code>a</code>, <code>w</code>, …</p></li>
<li><p><strong>Abstractions</strong>. They are like function definitions, we build an abstraction using a
variable and a term. Abstractions are denoted by <code>(λx.M)</code> (where <code>x</code> is a variable
and <code>M</code> a term).</p></li>
<li><p><strong>Applications</strong>. Abstractions let us build bigger terms, and applications let us apply terms to
abstractions.</p>
<p>For example, <code>(λx.x+1) 2</code> is an application of <code>(λx.x+1)</code> with the term <code>2</code>. When we
<a href="https://ro-che.info/ccc/18" title="A link to a cartoon explaining the difference between equality and reduction">reduce</a><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> this application we get<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> the term <code>2+1</code><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.
Applications are denoted by two terms and a space! How weird is that! I mean, this <code>E M</code>,
this <code>(λx.x+1) 2</code>, and this <code>y (λx.x**2)</code> are all valid applications (terms)
in lambda calculus<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.</p></li>
</ul>
<p>With Lambda Calculus we can do many interesting things, but it’s a little cumbersome and
verbose. For example, to calculate the factorial using only Lambda Calculus, we must
defined all the following terms:</p>
<pre><code class="language-plain">true = \x y . x
false = \x y . y
0 = \f x . x
1 = \f x . f x
succ = \n f x . f(n f x)
pred = \n f x . n(\g h . h (g f)) (\u . x) (\u .u)
mul = \m n f . m(n f)
is0 = \n . n (\x . false) true
Y = \f . (\x . x x)(\x . f(x x))
fact = Y(\f n . (is0 n) 1 (mul n (f (pred n))))
4 = (succ (succ (succ 1)))
</code></pre>
<p>With these definitions in place, we can compute the factorial of 4 by reducing the
expression <code>fact 4</code>.</p>
<p>I’ve taken the code above from <a href="https://crypto.stanford.edu/~blynn/lambda/">Ben Lynn’s notes on Lambda Calculus</a>. You can even
try to run the same example right on Lynn’s page (click on the button that says
<em>Factorial</em>).</p>
<p>That’s a pain on the guts to read and understand (unless you’re into that kind of stuff
;)). That’s why I’m taking some liberties here forward to extend this Lambda Calculus with
numbers, strings and booleans and their respective operations. Plus recursion and
<code>if-else</code> statements. With these extensions, it’s easy to write factorial:</p>
<pre><code class="language-plain">fact = \x. if (x=0) 1 (x * fact (x-1))
</code></pre>
<p>To continue with the factorial example, let’s reduce the application <code>fact 4</code>:</p>
<pre><code class="language-plain">fact 4
// replacing fact for definition
       = (λx.if (x=0) 1 (x*fact (x-1))) 4
// β-reduction
       = if (4=0) 1 (4*fact (4-1))
// if rule applied, 4 != 0
       = 4 * fact (4-1)
// replacing fact for definition
       = 4 * (λx.if (x=0) 1 (x*fact (x-1))) (4-1)
// β-reduction
       = 4 * if (4-1=0) 1 ((4-1)*fact (4-1-1))
// if rule applied, 4-1 != 0
       = 4 * (4-1) * fact (4-1-1)
// ...
       = 4 * (4-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1)
       = 4 * (4-1) * if (4-1-1=0) 1 ((4-1-1)*fact (4-1-1-1))
       = 4 * (4-1) * (4-1-1) * fact (4-1-1-1)
       = 4 * (4-1) * (4-1-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1-1)
       = 4 * (4-1) * (4-1-1) * if (4-1-1-1=0) 1 ((4-1-1-1)*fact (4-1-1-1-1))
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * fact (4-1-1-1-1)
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1-1-1)
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * if (4-1-1-1-1=0) 1 ((4-1-1-1-1)*fact (4-1-1-1-1-1))
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * 1
       = 4 * (4-1) * (4-1-1) * 1 * 1
       = 4 * (4-1) * 2 * 1 * 1
       = 4 * 3 * 2 * 1 * 1
       = 24
</code></pre>
<p>Well, that’s nice, and “simple” too. Because that is a bit annoying to do by hand, I wrote
a Python script reduce the expression for me. You can find the code in
<a href="https://github.com/helq/ILLA">here</a><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>.</p>
<h2>Typed Lambda Calculus</h2>
<p>Lambda Calculus is nice but it lacks types, and as we know from Haskell, types are
awesome! When we have types, we can ask the compiler/interpreter to dectect if what we’re
saying is coherent or not. Fortunately adding types to lambda calculus is quite simple and
intuitive. As any good professor I’ll give it to you as an exercise for home, or better
it’s trivial and left to the reader to finish (take that calculus<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> books :P).</p>
<p>Do you remember that we use <code>λ</code> to create an abstraction using a variable and a term? Well,
in Typed Lambda Calculus<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> we use the character <code>Λ</code> to create an “abstraction”
where the left side holds not a variable but a <strong>type</strong> variable. For example:</p>
<pre><code>ΛT.λx:T.x
</code></pre>
<p>it’s the equivalent lambda expression to <code>λx.x</code> in untyped lambda calculus.</p>
<p>Applications are now of two kinds: applications for terms and applications for types.
These two types of applications look the same and have the same semantic rules from
before. For example, the application <code>(ΛT.λx:T.x) Int 5</code><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> reduces to:</p>
<pre><code>(ΛT.λx:T.x) Int 5
= (λx:Int.x) 5 // beta-reduction
= 5:Int // beta-reduction
</code></pre>
<p>Note that the type of the whole expression <code>ΛT.λx:T.x</code> is <code>∀X.(X-&gt;X)</code>. This means that when
we apply any type <code>X</code> to whole the term, we get a new term with type <code>X-&gt;X</code>. Thus, in
Typed Lambda Calculus we have that any term, with and without type variables, has a type.
Let’s look at some other Typed Lambda Calculus terms:</p>
<pre><code>λx:Int.x+1            // with type: Int -&gt; Int
λx:String.x&lt;&gt;&quot; text&quot;  // String -&gt; String
λx:String.x+1         // String -&gt; String, this definition is inconsistent with + which is defined for numbers only (at least for this explanation)
ΛT.λx:Int.x           // ∀T.(Int-&gt;Int)
ΛX. ΛY. λx:X. λy:Y. x // ∀X.∀Y.X-&gt;Y-&gt;X
</code></pre>
<p>Take a close look at that last example and make sure you understand it. <em>Tip</em>: I’ve gain some
insight by working backwards, reading the type definition <code>∀X.∀Y.X-&gt;Y-&gt;X</code> and trying to
create the term definition.</p>
<p>Let’s apply some types and terms to the lambda expressions above:</p>
<pre><code>(λx:Int.x+1) 5                // Int
(λx:String.x&lt;&gt;&quot; text&quot;) &quot;some&quot; // String
(λx:String.x+1) &quot;more text&quot;   // failure!!! type mismatch of x:String and operator (+):Int-&gt;Int-&gt;Int
(ΛT.λx:Int.x) String 4        // Int

(ΛX. ΛY. λx:X. λy:Y. x) Int          // ∀Y.Int-&gt;Y-&gt;Int
(ΛX. ΛY. λx:X. λy:Y. x) Int String   // Int-&gt;String-&gt;Int
(ΛX. ΛY. λx:X. λy:Y. x) Int String 5 // Int
</code></pre>
<h2>Higher Rank Polymorphism</h2>
<p>Before we explore Higher Rank Polymorphism, I would like to ask you to give me the type
definition of some haskell functions in Typed Lambda Calculus. For that, we will need to
translate Haskell code into Typed Lambda Calculus, and get the type definition from
there. For example, the process to get the type of <code>map</code> on Typed Lambda Calculus would
be:</p>
<h3>Translate <code>map</code> into Typed Lambda Calculus</h3>
<p>Given the definition of <code>map</code>:</p>
<pre><code class="language-haskell">map _ []     = []
map f (x:xs) = f x : map f xs
</code></pre>
<p>we can rewrite it as the Untyped Lambda expression<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>:</p>
<pre><code>map = λf.λxs.if (xs=nil) nil (cons ((f (car xs)) (map f (cdr xs))))
</code></pre>
<p>Notice, how the lack of pattern matching on lambda expressions forces us to check if the
list is empty. In case the list is empty, we return an empty list, otherwise we return a
new list with the application of the function to the first element and a recursive call to
<code>map</code> for the rest of the list. If we were to write the expression back into Haskell, we’d
get:</p>
<pre><code class="language-haskell">map f xs = if null xs
            then []
            else f (head xs) : map f (last xs)
</code></pre>
<p>Anyway, if we add the necessary types we would get<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup>:</p>
<pre><code>map = ΛX.ΛY.λf:X-&gt;Y.λxs:[X].if (xs=nil) nil (cons ((f (car xs)) (map f (cdr xs))))
</code></pre>
<p>with type:</p>
<pre><code>∀X.∀Y.(X-&gt;Y)-&gt;[X]-&gt;[Y]
</code></pre>
<p>Here is where I want you to notice how this type looks very similar to the haskell type
for <code>map</code>:</p>
<pre><code class="language-haskell">Prelude&gt; :t map
map :: (a -&gt; b) -&gt; [a] -&gt; [b]
</code></pre>
<p>but there is no <code>∀X.∀Y.</code> in that haskell type, or is there? Yeah, it is there, but it is
implicit. You can define you’re own <code>map</code> function and specify the type you want for it
using <code>forall</code> in the type definition (available in the extension <code>RankNTypes</code>):</p>
<pre><code>$ ghci -XRankNTypes
Prelude&gt; let rmap f xs = if null xs then [] else f (head xs) : rmap f (tail xs); rmap :: forall a. forall b. (a-&gt;b) -&gt; [a] -&gt; [b]
</code></pre>
<p>Notice the type definition <code>rmap :: forall a. forall b. (a-&gt;b) -&gt; [a] -&gt; [b]</code>, it’s very
similar to the type of our Typed Lambda expression. Unfortunatelly, Haskell ignores all
<code>forall</code>'s (when they’re rank 1), so we get in console the type:</p>
<pre><code>Prelude&gt; :t rmap
rmap :: (a -&gt; b) -&gt; [a] -&gt; [b]
</code></pre>
<p>By the way, functions with <code>forall</code> in their type definition are called <strong>polymorphic</strong>.</p>
<h3>More Typed Lambda expressions</h3>
<p>Now, a little exercise for you. Find the type definitions for the following Haskell
functions. Don’t forget to use <code>forall</code> in the definitions.</p>
<pre><code class="language-haskell">foldl _ z []     = z
foldl f z (x:xs) = foldl f (f z x) xs

const a _ = a

length []     = 0
length (_:xs) = 1 + length xs

fst (a, b) = a
</code></pre>
<p>The answers are:</p>
<pre><code class="language-haskell">foldl :: forall a b. (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a
const :: forall a b. a -&gt; b -&gt; a
length :: forall a. [a] -&gt; Int
fst :: forall a b. (a, b) -&gt; a
</code></pre>
<p>Well, it wasn’t that hard, was it?</p>
<h3>Higher Rank Polymorphism (finally)</h3>
<p>What should be the type of <code>weird</code> (defined below) if we want to call it with parameters
<code>id 5 &quot;ho&quot;</code>?</p>
<pre><code class="language-haskell">weird g a s = (g a, g s)
</code></pre>
<p>Our first guess could be:</p>
<pre><code class="language-haskell">weird :: forall x y. (x-&gt;x) -&gt; y -&gt; String -&gt; (y, String)
</code></pre>
<p>but Haskell objects:</p>
<pre><code class="language-plain">&lt;interactive&gt;:18:27: error:
    • Couldn't match expected type ‘x’ with actual type ‘String’
      ‘x’ is a rigid type variable bound by
        the type signature for:
          weird :: forall x y. (x -&gt; x) -&gt; y -&gt; String -&gt; (y, String)
        at &lt;interactive&gt;:18:46
    • In the first argument of ‘g’, namely ‘s’
      In the expression: g s
      In the expression: (g a, g s)
    • Relevant bindings include
        g :: x -&gt; x (bound at &lt;interactive&gt;:18:11)
        weird :: (x -&gt; x) -&gt; y -&gt; String -&gt; (y, String)
          (bound at &lt;interactive&gt;:18:5)
</code></pre>
<p>What does that mean? Basically, that <code>x</code> was expected to be of the type <code>String</code>. But the
whole deal with <code>forall</code>s was to tell the type inference that <code>x</code> could be anything, not
just <code>String</code>.  <code>weird</code> should receive a polymorphic function <code>x-&gt;x</code>.</p>
<p>What the heck is happening?!</p>
<p>Well, to understand why that type doesn’t really work, we will rewrite our function as a
Typed Lambda expression:</p>
<pre><code>weird = ΛY. ΛX. λg:(X-&gt;X). λa:Y.  λs:String. (g a, g s)
</code></pre>
<p>with type (we hope):</p>
<pre><code>∀Y.∀X.(X-&gt;X)-&gt;Y-&gt;String-&gt;(Y, String)
</code></pre>
<p>and try to reduce the application <code>weird Int String (λb.b) 5 &quot;ho&quot;</code>:</p>
<pre><code class="language-plain">weird Int String (λb.b) 5 &quot;ho&quot;
  = (ΛY. ΛX. λg:(X-&gt;X). λa:Y. λs:String. (g a, g s)) Int String (λb.b) 5 &quot;ho&quot;
  = (ΛX. λg:(X-&gt;X). λa:Int. λs:String. (g a, g s)) String (λb.b) 5 &quot;ho&quot;
  = (λg:(String-&gt;String). λa:Int. λs:String. (g a, g s)) (λb.b) 5 &quot;ho&quot;        // g:(λX.X) stops being polymorphic!!!
  = (λa:Int. λs:String. ((λb:String.b) a, (λb:String.b) s)) 5 &quot;ho&quot;
  = (λs:String. ((λb:String.b) (5:Int), (λb:String.b) s)) &quot;ho&quot;
  = ((λb:String.b) (5:Int), (λb:String.b) (&quot;ho&quot;:String))
  FAIL!! 5 has type `Int` but (λb:String.b) requires 5 to be `String`
</code></pre>
<p>Now you know why it fails! Going from line 3 to 4 the type of <code>g</code> gets converted from what
we expected to be polymorphic <code>∀X.X-&gt;X</code> to <code>String-&gt;String</code>. What does this means is that we’re
forcing to pick the type of <code>X-&gt;X</code> when we give the type of the first element <code>a</code>. At the
end, the real type of the whole lambda expression is:</p>
<pre><code>∀Y.∀X.(String-&gt;String)-&gt;String-&gt;String-&gt;(String, String)
</code></pre>
<p>to prove it, let’s reduce the expression <code>weird String String (λb.b) &quot;hi&quot; &quot;ho&quot;</code>:</p>
<pre><code class="language-plain">weird String String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (ΛY. ΛX. λg:(X-&gt;X). λa:Y. λs:String. (g a, g s)) String String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (ΛX. λg:(X-&gt;X). λa:String. λs:String. (g a, g s)) String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (λg:(String-&gt;String). λa:String. λs:String. (g a, g s)) (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (λa:String. λs:String. ((λb:String.b) a, (λb:String.b) s)) &quot;hi&quot; &quot;ho&quot;
  == (λs:String. ((λb:String.b) &quot;Hi&quot;:String, (λb:String.b) s:String)) &quot;ho&quot;
  == ((λb:String.b) (&quot;Hi&quot;:String), (λb:String.b) (&quot;ho&quot;:String))
  == ((&quot;Hi&quot;:String), (λb:String.b) (&quot;ho&quot;:String))
  == (&quot;Hi&quot;:String, &quot;ho&quot;:String)
</code></pre>
<p>You may think, there is no way to make our function behave like we wanted to, but there
is something we haven’t explored yet. We can define the type of <code>g</code> using <code>∀</code>!  Mmmm…,
let’s see what happens if we rewrite our typed lambda expression to make <code>g</code>'s definition
polymorphic:</p>
<pre><code>weird = ΛY. λg:(∀X.(X-&gt;X)). λa:Y. λs:String. (g Y a, g String s)
</code></pre>
<p>and now, the type of <code>weird</code> would be:</p>
<pre><code>∀Y.(∀X.X-&gt;X)-&gt;Y-&gt;String-&gt;(Y, String)
</code></pre>
<p>Notice how <code>g</code> receives two parameters now! The first is the type and the second is a term.
Reducing the application <code>weird Int (ΛX.λb:X.b) 5 &quot;hi&quot;</code> we get:</p>
<pre><code class="language-plain">weird Int (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (ΛY. λg:(∀X.(X-&gt;X)). λa:Y. λs:String. (g Y a, g String s)) Int (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (λg:(∀X.(X-&gt;X)). λa:Int. λs:String. (g Int a, g String s)) (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (λa:Int. λs:String. ((ΛX.λb:X.b) Int a, (ΛX.λb:X.b) String s)) 5 &quot;hi&quot;
  == (λs:String. ((ΛX.λb:X.b) Int 5, (ΛX.λb:X.b) String s)) &quot;hi&quot;
  == ((ΛX.λb:X.b) Int 5, (ΛX.λb:X.b) String &quot;hi&quot;)
  == ((λb:Int.b) 5, (ΛX.λb:X.b) String &quot;hi&quot;)
  == (5:Int, (ΛX.λb:X.b) String &quot;hi&quot;)
  == (5:Int, (λb:String.b) &quot;hi&quot;)
  == (5:Int, &quot;hi&quot;:String)
</code></pre>
<p>Awesome. It worked! If we translate it back to Haskell, we get:</p>
<pre><code>Prelude&gt; let weird g a s = (g a, g s); weird :: forall y. (forall x. x-&gt;x) -&gt; y -&gt; String -&gt; (y, String)
Prelude&gt;
</code></pre>
<p>and</p>
<pre><code>Prelude&gt; weird id 5 &quot;ho&quot;
(5,&quot;ho&quot;)
Prelude&gt; :t weird id (5::Int) &quot;ho&quot;
weird id (5::Int) &quot;ho&quot; :: (Int, String)
Prelude&gt;
</code></pre>
<p><code>weird</code> is what is called a <strong>rank-2 polymorphic function</strong> ;). It’s rank-2 because
it has a <code>forall</code> nested inside. By default Haskell doesn’t understand rank-2 functions,
so to define them we need to use the GHC extension <code>RankNTypes</code> which we were using in the
examples above.</p>
<p>Further readings:</p>
<ul>
<li><a href="https://en.wikibooks.org/wiki/Haskell/Polymorphism">Polymorphism (Haskell Wikibook)</a></li>
<li><a href="https://ocharles.org.uk/blog/guest-posts/2014-12-18-rank-n-types.html">24 Days of GHC Extensions: Rank N Types</a></li>
<li><a href="https://apocalisp.wordpress.com/2010/07/02/higher-rank-polymorphism-in-scala/">Higher-Rank Polymorphism in Scala</a></li>
<li><a href="https://elmanantialdebits.blogspot.com.co/2010/04/polimorfismo-de-rango-superior.html">Polimorfismo de Rango Superior (spanish for Higher Rank Polymorphism)</a></li>
<li><a href="https://crypto.stanford.edu/~blynn/lambda/">Lambda Calculus by Ben Lynn</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1"  class="footnote-item"><p>This is not actually truth because C is not Turing Complete, but
for the sake of simplicity we will assume that C and Haskell are both Turing Complete.
The main problem arises from C’s way to access to memory. C is limited by the size of
pointers, which in theory limits it from being truly Turing Complete, but in practice is
just as powerful as Haskell. For further discussion take a look at this fantastic thread
in stack exchange: https://cs.stackexchange.com/questions/60965/is-c-actually-turing-complete <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2"  class="footnote-item"><p>Lambda Calculus is like maths written on paper. You need an interpreter,
which is often your head, that transforms a term into another term by applying a set of
rules. In lambda calculus, there are two main rules to transform between different
terms: <strong>alpha-conversion</strong> (renaming of variables inside an abstraction, e.g.,
<code>(λy.y+1)</code> can be alpha-converted into <code>(λm.m+1)</code> or <code>(λz.z+1)</code>, …), and
<strong>beta-reduction</strong> (takes the right side of an application and replaces all appeareances
of the variable on the abstraction on the left side of the application, e.g., <code>(λx.x+1) 2</code> gets beta-reduced into <code>2+1</code><sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4]</a></sup>) <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3"  class="footnote-item"><p>Using beta-reduction. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4"  class="footnote-item"><p><code>2+1</code> can be further reduced to <code>3</code> by using the intuitive rule of adding, or
if you want to be less pragmatic write <code>2</code>, <code>1</code>, <code>+</code>, and <code>2+1</code> as pure lambda calculus
terms. Some guidence on that can be found in the wikipedia
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">here</a>. You nerds. <a href="#fnref4" class="footnote-backref">↩</a> <a href="#fnref4:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn5"  class="footnote-item"><p>Wait! That looks just like Haskell code! Well, it shouldn’t surprise us
much, after all we can do this <code>sum list</code> (with <code>list = [1..10]</code>, for example), this
<code>(\x-&gt;x+1) 2</code>, and this <code>y (\x-&gt;x**2)</code> (with <code>y f = f 3</code> or <code>y = ($3)</code>, for example) in
Haskell. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6"  class="footnote-item"><p>Sorry if you see too many spelling mistakes on the Python script.  I wrote the
code some years ago for a class on “compilers”<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>. My English sucked at the
time. Not that it doesn’t now, but it was way worse back then. <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
<li id="fn7"  class="footnote-item"><p>ikr, shameless self-promotion. <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8"  class="footnote-item"><p>or should it be <em>calculi</em>? <em>calculuses</em>? <em>calculus’s</em>? <em>calculises’</em>??? <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9"  class="footnote-item"><p>In <a href="https://en.wikipedia.org/wiki/System_F">System F</a> to be more precise <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
<li id="fn10"  class="footnote-item"><p>Note that I’m abusing (“extending”) again the notation of Lambda Calculus to
add some simple and intuitive types like <code>String</code>, <code>Int</code> and <code>Bool</code>. Also, I need to
aknowledge <a href="https://elmanantialdebits.blogspot.com.co/2010/04/polimorfismo-de-rango-superior.html">this awesome post</a> which got me thinking on type Lambda
Calculus and Higher Order Polymorphism. <a href="#fnref10" class="footnote-backref">↩</a></p>
</li>
<li id="fn11"  class="footnote-item"><p><code>cons</code>, <code>car</code> and <code>cdr</code> are simple functions to operate with tuples in
languages like lisp. <code>cons</code> creates a new tuple from two values, <code>car</code> and <code>cdr</code> take a
tuple and return its first element and second element, respectively<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>. Lisp
was designed directly from Untyped Lambda Calculus, thus it’s easier to write an
expression first in Lisp and then translate it into a Lambda expresion of Untyped Lambda
Calculus. <a href="#fnref11" class="footnote-backref">↩</a></p>
</li>
<li id="fn12"  class="footnote-item"><p>We may think that the “equivalents” of <code>cons</code>, <code>car</code> and <code>cdr</code> in haskell
would be <code>(,)</code>, <code>fst</code> and <code>snd</code>, but they aren’t! They behave different to the original
Lisp definitions. It is not possible to create a list in Haskell using only <code>(,)</code>'s
(unless you wrapped <code>(,)</code> in a newtype definition and did some trickery), i.e.,
this fails in Haskell: <code>range n m = if n&gt;m then () else (n, range (n+1) m)</code>, but this
works just fine in lisp: <code>(defun range (n m) (cons n (range (+ n 1) m)))</code>. <a href="#fnref12" class="footnote-backref">↩</a></p>
</li>
<li id="fn13"  class="footnote-item"><p>You know the drill already. I’m extending the typed lambda calculus with lists.
Their type is represented by the type <code>[] a</code> or <code>[a]</code> (which has kind: unary type
constructor<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>). <a href="#fnref13" class="footnote-backref">↩</a></p>
</li>
<li id="fn14"  class="footnote-item"><p>Kinds are another extension to Lambda Calculus which give us the power to
parametrize types. It’s another whole topic (and to be honest, I don’t get it
completely), you can find more info in the <a href="https://en.wikipedia.org/wiki/Kind_(type_theory)">wikipedia</a>. <a href="#fnref14" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></description><link>https://helq.github.io/blog/posts/2017/06/en/haskell-s-higher-rank-polymorphism</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2017/06/en/haskell-s-higher-rank-polymorphism</guid><pubDate>Wed, 28 Jun 2017 17:08:00 GMT</pubDate></item><item><title><![CDATA[Chinese Log - Step 2: Learning Pronunciation]]></title><description><![CDATA[<p><em>Updated: 2019.05.29</em></p>
<p><em>This article was supposed to be one in a series of posts documenting my Mandarin learning
journey. I’ve stopped to learn the language but I still think that the Anki deck
presented in this post is valuable for anyone who whishes to trully learn the phonetics of
the language. You can find the deck in <a href="https://ankiweb.net/shared/info/854183352">ankiweb</a> and the source code in
<a href="https://github.com/helq/pinyin-beginners-anki-deck">github</a>.</em></p>
<p><em>The previous post can be found <a href="https://github.com/helq/blag/blob/0188da8b861a0a8d3d8b4895181ef0f4d5485bd2/src/blog/posts/2016-01-18-chinese-log-step-2.md">in here</a>.</em></p>
<hr>
<p>The goal of this post is to explain the stuff I considered into the creation of an Anki
deck to learn Chinese phonetics.</p>
<p>First, some terminology. Mandarin syllables can be divided into two parts: an (optional)
initial part and a final part.</p>
<p>Mandarin initials and finals are quite different to many sounds (phonemes) found in
English (or Spanish, in my case). So, learning initials and finals in isolation will be
our first task.</p>
<p>Notice that even though we can study initials and finals in isolation, not all
combinations of initials and finals are valid sounds in Mandarin, similar to how not all
combinations of consonants and vowels in English make sense or are easy to pronunce (try with
<code>Szczęście</code>, happiness in Polish).</p>
<p>Once we master the individual sounds, we need to be able to recognise (and pronunce) the
sounds together, which means: we need to learn the syllables. And as if that wasn’t
enough, Mandarin has this little thing that no other European Language has: Tones.</p>
<p>Tones are hard, unless you are familiar with them or have a trained ear. I think musicians
may have some advantage here, as they are trained to understand, tell apart, and detect
changes in pitch. I, a humble programmer, am not, and pitch presents for me the hardest of
challenges.</p>
<p>Anyway, in the rest of this post I want to give an overview of what you should know before
you go deep into your ear (and pronunciation) training.</p>
<!--
   -I hope that by breaking the problem into little steps, I will be able to learn a new
   -characteristic of the language at the time and not be overwelmed by the immense difference
   -between the phonetic systems of my mother language and Mandarin.  This is of course an
   -oversimplification, but it is an useful simplification.
   -->
<p>So, let’s start. First, you need to know IPA!</p>
<h2>IPA and Pinyin</h2>
<p>I use IPA as a guide to tell apart different sounds in a language that otherwise would
look like the same in paper from how they are written. What I mean is that if you are
learning to pronunce Mandarin using only Pinyin as your guide, you may be misguided into
thinking that, for example, <code>-ei</code> sounds like <code>-e</code> with some other sound added at the end,
but that is completely wrong. In fact, <code>-ei</code> is usually pronunced as <code>[eɪ̯]</code> while <code>-e</code> is
pronunced as <code>[ɯ̯ʌ]</code>.</p>
<p>An in depth introduction of IPA can be found at <a href="https://fluent-forever.com/chapter3/">IPA explanation | Pronunciation/Ear training</a>
by Fluent Forever. The people behind <a href="https://fluent-forever.com">Fluent Forever</a> have
been putting quality resources on Language Learning for years, be sure to check them out.</p>
<p>Also, the wikipedia is a great resource: <a href="https://en.wikipedia.org/wiki/Help:IPA_for_Mandarin">IPA for Mandarin</a>.
Don’t forget to read the <a href="https://en.wikipedia.org/wiki/Pinyin">Pinyin Article in the Wikipedia</a>.</p>
<h2>The deck</h2>
<p>Now, <a href="https://ankiweb.net/shared/info/854183352">the deck</a> and the <a href="https://github.com/helq/pinyin-beginners-anki-deck">source code</a>.</p>
<p>The deck is composed of four different decks. Each card in the deck has its own audio,
pinyin and IPA. The subdecks are:</p>
<ul>
<li>Initials,</li>
<li>Finals,</li>
<li>(some) Minimal Pairs (tailored to the sounds <em>I</em> find the hardest),</li>
<li>and, Tones.</li>
</ul>
<p><em>Beware:</em> there are two kinds of 3rd tones in the recordings. The first kind is the
&quot;traditional 3rd tone&quot;, i.e. the 3rd tone that is taught everywhere. The second kind is
the &quot;Spoken/Real 3rd Tone&quot;, which is the tone spoken by people in real conversations.
For a detailed explanation on what I mean by traditional vs spoken see
<a href="http://www.sinosplice.com/life/archives/2008/12/10/toward-better-tones-in-natural-speech">Toward Better Tones in Natural Speech</a>.</p>
<p>I made the deck so that every time you check a card, the card picks a random audio from a
set of audios. For this to work properly in Anki Desktop, you need to install the
<a href="https://ankiweb.net/shared/info/498789867">Replay Button Addon</a>. No addon is needed for
AnkiDroid. I’ve only checked the deck in Anki Desktop and AnkiDroid.</p>
<h2>Sources and Acknoledgements</h2>
<p>Special thanks to <a href="https://github.com/SimonLammer/anki-persistence">anki-persistence</a> which allows me to easily retrieve information
shown at the front of the card.</p>
<p>I don’t own any of the recordings. All credit for the recordings goes to:</p>
<ol>
<li><a href="http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart">http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart</a></li>
<li><a href="https://chinese.yabla.com/chinese-pinyin-chart.php">https://chinese.yabla.com/chinese-pinyin-chart.php</a></li>
<li><a href="http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table">http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table</a></li>
<li><a href="http://www.archchinese.com/chinese_pinyin.html">http://www.archchinese.com/chinese_pinyin.html</a></li>
<li><a href="http://pinpinchinese.com/pinyin-chart/">http://pinpinchinese.com/pinyin-chart/</a></li>
<li><a href="http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html">http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html</a></li>
<li><a href="http://lost-theory.org/chinese/phonetics/">http://lost-theory.org/chinese/phonetics/</a></li>
<li><a href="http://www.china-on-site.com/language/phonetic/phonetic.htm">http://www.china-on-site.com/language/phonetic/phonetic.htm</a></li>
</ol>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-2</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-2</guid><pubDate>Tue, 19 Jan 2016 00:45:00 GMT</pubDate></item><item><title><![CDATA[Chinese Log - Step 1: Searching for Resources]]></title><description><![CDATA[<p><em>Updated: 2019.05.29</em></p>
<p>Few years ago, in 2016, I started to learn Chinese, but I very quickly realised what a
humongous task it was. I had planned to document my whole journey into learning a new
language but reality struck hard. So, here I am, updating this for the first time in years
to tell you that I did not learn much Chinese with the methodology, I wanted to use, and
opted for something less hard core, something that takes me 30 minutes a day. So far, so
good. I have tried hard to learn the sounds of the language, some grammar, some basic
phrases, and I have gone full into hearing conversations.</p>
<p><strong><em>Original article:</em></strong></p>
<p><em>This article is part of a series of posts on my Chinese learning experience, for more
information visit the <a href="/blog/posts/2016/01/en/my-chinese-learning-log/">main series page</a></em></p>
<p>Here are the web pages I found useful when reading about Chinese Language as a complete
beginner (huh, I’m talking like I knew Chinese, for the record: I’m a beginner!). Not all
links are meant to be helpful for the beginner though, they’re just resources I found
useful.</p>
<p>The bold links are the most relevant for the first stage of the learning process, the
pronunciation part. But I think it’s worthed to read all the links to get an initial
picture of the Chinese language.</p>
<h2>First of all, why do you wanna learn chinese?</h2>
<ul>
<li><strong><a href="http://www.hackingchinese.com/goals-and-motivation-part-1-introduction/">Goals and motivation, part 1 – Introduction</a></strong>
(my answer: just to know a different language. I wanted to learn French, Portuguese, or
Chinese, and I decide for Chinese because is the hardest from my mother language
(Spanish))</li>
<li><strong><a href="http://www.sciencealert.com/here-are-4-key-strategies-for-remembering-everything-you-learn">How to learn effectively</a></strong>
Few science based tips to improve learning, so you can achieve your learning goals (part
of the reason why am I writing this in the first place ;) )</li>
</ul>
<h2>About pronunciation and Pinyin</h2>
<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/Help:IPA_for_Mandarin">IPA for Mandarin</a></strong> Take a look
at the awesome chart in the wikipedia. Learn what is IPA and how can you use it to learn
a new language.</li>
<li><strong><a href="https://fluent-forever.com/chapter3/">IPA explanation | Pronunciation/Ear training</a></strong>
A clear explanation of IPA.</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Pinyin">Pinyin - Wikipedia</a></strong> An explanation of pinyin.</li>
<li><strong><a href="http://www.sinosplice.com/learn-chinese/pronunciation-of-mandarin-chinese">Chinese Pronunciation</a></strong>
A detailed explanation of those difficult sounds in Chinese (for English speakers). The
post gives interesting tips on how to pronounce the tricky j,q,x, zh,ch, sh,z,c,s
sounds, even if you’re not a native English speaker his explanation could help you a
lot.</li>
<li><a href="http://www.hackingchinese.com/learning-pronunciation-as-a-beginner/">Learning Chinese pronunciation as a beginner</a>
Motivational post for pronunciation.</li>
<li><a href="https://www.youtube.com/watch?v=UuX9F5emdk0">Mandarin Chinese Tones</a>
An explanation on how to produce the tones in Chinese.
<a href="https://www.youtube.com/watch?v=3wV8B4bx1lM">One more from Yangyang</a></li>
<li><a href="http://www.hackingchinese.com/24-great-resources-for-improving-your-mandarin-pronunciation/">24 Resources for improving pronunciation</a></li>
<li>Some Pinyin Charts:
<ul>
<li><a href="https://en.wikipedia.org/wiki/Pinyin_table">Pinyin Table - Wikipedia</a></li>
<li><strong><a href="http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart">Pinyin Chart - All Set Learning</a></strong>
it also has each pinyin in IPA</li>
<li><a href="http://www.ichineselearning.com/learn/pinyin-chart.html">iChineseLearning Chart</a></li>
<li><strong><a href="http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table">Yoyo Chinese</a></strong>
it has an special emphasis in the 3rd tone as a low tone (or half-3rd-tone)</li>
<li><a href="http://www.archchinese.com/chinese_pinyin.html">ArchChinese Chart</a></li>
<li><a href="http://talkbank.org/pinyin/Trad_chart_IPA.php">Traditional Pinyin Chart in IPA - TalkBank</a></li>
<li><a href="https://chinese.yabla.com/chinese-pinyin-chart.php">Pinyin Chart - Yabla</a></li>
<li><a href="http://lost-theory.org/chinese/phonetics/">Mandarin Chinese Phonetics Table - Lost Theory</a></li>
<li><a href="http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html">Chinese Pinyin Chart - Gettysburg College</a></li>
</ul></li>
<li>About the third tone:
<ul>
<li><strong><a href="http://www.sinosplice.com/life/archives/2008/12/10/toward-better-tones-in-natural-speech">Toward Better Tones in Natural Speech</a></strong></li>
<li><strong><a href="http://www.hackingchinese.com/learning-the-third-tone/">Learning the third tone</a></strong></li>
<li><strong><a href="https://www.youtube.com/watch?v=aAqayUpWr_o">How to pronounce the 3rd tone like a native</a></strong>
A video if you feel like not reading the other to resources ;).</li>
</ul></li>
<li><strong><a href="http://www.hackingchinese.com/focusing-on-tone-pairs-to-improve-your-mandarin-pronunciation/">Tone pairs for improving
pronunciation</a></strong></li>
<li><strong><a href="http://www.sinosplice.com/learn-chinese/tone-pair-drills">Tone pair drills</a></strong></li>
<li><a href="https://en.wikipedia.org/wiki/Standard_Chinese_phonology">Standard Chinese phonology</a>
I left this at last because I haven’t even finish reading it. But it’s the wikipedia,
so, I think, it has valuable information.</li>
</ul>
<h2>About books</h2>
<ul>
<li><strong><a href="http://www.amazon.com/Assimil-Language-Courses-Chinese-compact/dp/0320006158">Assimil Chinese with Ease</a></strong>
Book focus in self-learning</li>
<li><a href="http://www.amazon.com/Schaums-Outline-Chinese-Grammar-Claudia/dp/0071377646">Schaum’s Outline of Chinese Grammar</a></li>
<li><a href="http://www.amazon.com/Modern-Mandarin-Chinese-Grammar-Practical/dp/0415827140?tag=duckduckgo-ffab-20">Modern Mandarin Chinese Grammar: A Practical Guide</a></li>
<li><a href="http://www.amazon.com/Reading-Writing-Chinese-Characters-Compounds/dp/080484299X">Reading and Writing Chinese: Third Edition</a>
I’m not sure if this book is good because I don’t plan to learn to write in Chinese
until I have the enough knowledge to understand Spoken Chinese.</li>
</ul>
<h2>Characters</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Chinese_characters">Chinese Characters - Wikipedia</a>
(Man, I love the wikipedia so much)</li>
<li><a href="http://www.learnchineseok.com/2012/05/write-chinese-radicals-symbol-letters.html">Learn Chinese characters through radicals, etymology, …</a></li>
<li><strong><a href="http://languagelog.ldc.upenn.edu/nll/?p=189">How to learn to read Chinese</a></strong>
this and other posts motivated me to not study the characters in the beginning, but
rather when I’m experienced in the language. For more:
<a href="http://languagelog.ldc.upenn.edu/nll/?p=10554">How to learn Chinese and Japanese</a></li>
<li><a href="https://web.archive.org/web/20150618081452/http://www.zein.se/patrick/chinen9p.html">Introduction to Chinese Characters</a></li>
<li><a href="http://www.hanzicraft.com/">Character decomposition</a>
(should this be in the dictionary list of resources below?)</li>
</ul>
<h2>About Grammar</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Chinese_grammar">Chinese Grammar - Wikipedia</a></li>
<li><a href="http://resources.allsetlearning.com/chinese/grammar">Chinese Grammar Wiki</a></li>
<li><a href="http://www.rci.rutgers.edu/~rsimmon/chingram/">Basic Chinese Grammar</a></li>
<li><a href="http://chinese.stackexchange.com/questions/16246/descriptive-generative-grammar-of-mandarin">StackExchange discussion about resources for chinese grammar</a></li>
<li><a href="https://fluent-forever.com/learning-grammar-without-translation/">Learning grammar and abstract words without translation</a>
A little tip to learn grammar without using translation (or trying it)</li>
</ul>
<h2>Software</h2>
<ul>
<li><a href="https://ankiweb.net/shared/info/235147699">Timo’s All-In-One Chinese Deck</a>
a deck to use with <a href="http://ankisrs.net/">Anki</a></li>
<li><a href="http://www.hackingchinese.com/using-audacity-to-learn-chinese-speaking-and-listening/">Using Audacity to learn Chinese</a></li>
<li><a href="http://www.fon.hum.uva.nl/praat/">Praat</a> software to study phonetics, how to use it:
<a href="http://www.sinosplice.com/life/archives/2008/01/21/seeing-the-tones-of-mandarin-chinese-with-praat">Seeing the Tones of Mandarin Chinese with Praat</a></li>
</ul>
<h2>Dictionaries and word lists</h2>
<ul>
<li><a href="http://ce.linedict.com/dict.html#/cnen/home">Line Dict</a></li>
<li><a href="http://www.hskhsk.com/word-lists.html">HSK Lists</a> word lists from the
<a href="https://en.wikipedia.org/wiki/Hanyu_Shuiping_Kaoshi">Chinese Proficiency Test</a></li>
<li><a href="http://www.pleco.com/">Pleco dictionary</a></li>
<li><a href="http://forvo.com/languages/zh/">Forvo</a> a web data base for thousands of word recordings
in many languages</li>
</ul>
<h2>Audios y videos</h2>
<ul>
<li><a href="https://chinesepod.com/">Chinesepod</a> podcasts in Chinese/English with different levels
of difficulty, and other audio/video resources.</li>
<li><a href="http://english.cntv.cn/learnchinese/">CCTV Learn Chinese</a>
national Chinese news for foreigners</li>
<li><a href="http://www.slow-chinese.com/">Slow Chinese</a>
Podcasts in a slow Chinese, specially for learners</li>
<li>I heard from <a href="https://www.youtube.com/watch?v=GjYXMFVOTmk">this guy (Steve Kaufmann)</a>
that the dialogs from &quot;Xiang Sheng 相声 (crosstalk)&quot; usually emphasize on the tones, so
search for them, and tell me what you think.</li>
<li><a href="http://www.fluentu.com/">FluentU</a> a platform with videos subtitled in English and Chinese</li>
<li>More audio video resources (<em>advanced</em>, but saved for the future):
<ul>
<li>Manhua (“chinese manga”):
<ul>
<li><a href="http://myanimelist.net/topmanga.php?type=manhua">Manhua - My Anime List</a></li>
<li><a href="http://manga.about.com/od/recommendedreading/tp/ChineseManhua.htm">Chinese Manhua, Comics and Graphic Novels</a></li>
</ul></li>
<li>Chinese Animation (or “Chinese Anime” if you like):
<ul>
<li><a href="http://sinomotion.tumblr.com">Sino Motion</a></li>
</ul></li>
</ul></li>
<li><a href="http://www.chinese-forums.com/index.php?/topic/24097-tv-series-recommendations-and-index-thread/">TV Series Recommendations - Chinese-forums.com</a></li>
</ul>
<h2>(more) web pages for learning Chinese</h2>
<ul>
<li><a href="http://livemocha.com/pages/languages/learn-mandarin-chinese/">Learn Chinese - Livemocha</a></li>
<li><a href="http://www.chinese-skill.com/cs.html">ChineseSkill</a> Chinese doulingo-ish app</li>
<li><a href="http://www.archchinese.com/">ArchChinese</a> dictionary, flashcards, tones, …</li>
</ul>
<h2>More resources pages</h2>
<ul>
<li><a href="http://www.iwillteachyoualanguage.com/resources/mandarin-chinese-resources/">111 Mandarin Chinese resources you wish you knew</a></li>
<li><a href="https://eastasiastudent.net/china/mandarin/chinese-learning-tools/">My favourite Chinese learning tools</a></li>
<li><a href="https://chinese.stackexchange.com/questions/1120/resources-for-learning-mandarin-chinese">Resources for learning Mandarin Chinese - StackExchange</a></li>
</ul>
<h2>And some random stuff</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Lion-Eating_Poet_in_the_Stone_Den">Lion-Eating Poet in the Stone Den</a></li>
<li><a href="https://www.youtube.com/watch?v=e73btaVo868">Cantonese Vs. Mandarin</a></li>
<li><a href="http://popupchinese.com/lessons/absolute-beginners/casual-greetings-in-chinese">Casual Greetings in Chinese</a></li>
</ul>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-1</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-1</guid><pubDate>Sun, 17 Jan 2016 22:25:00 GMT</pubDate></item><item><title><![CDATA[My Chinese Learning Log]]></title><description><![CDATA[<p>Welcome to my log! I intend to write here my progress while I learn Chinese from zero.
That means, I will try to track my progress in this post (or list of posts), the tools I
use, the tools I make, my worries and difficulties and what I learn in the process.</p>
<p>I hope I will see in 1 or 2 years to this post and say, well… you did something with
your “free” time.</p>
<p>So, after spending 1 week searching for resources to study Chinese, I came up with this
study plan:</p>
<ol>
<li><a href="/blog/posts/2016/01/en/chinese-log-step-1/">Search for information and read the most I can about the basics of the
language</a>, which means to read: wikipedia,
blogs, books and their commentaries, … (time spent in this step: few days to few
weeks)</li>
<li><a href="/blog/posts/2016/01/en/chinese-log-step-2/">Study pronunciation of Chinese Mandarin</a>,
it’s a tricky language, with many weird sounds (zhi, chi, zi, ci, ji and qi sound
incredibly similar to my ears) and tones. Use pinyin for this. (time spent: few weeks
to one month or two)</li>
<li>Study spoken Chinese with help of written pinyin. Don’t even bother with the written
Chinese, maybe learn some useful characters but not focus on learning them. (time
spent: One year to many! Actually, I think I’ll never go out from this level)</li>
<li>Learn written Chinese, or memorize Characters by means of reading, mainly. Don’t focus
on learning characters isolated, it’s a dumb idea (Chinese characters represent a
sound, a syllable, and many (most?) words in Chinese are compose from 2 or more
syllables).</li>
</ol>
<h2>Measuring my progress</h2>
<p>I will measure my progress on hours using a spread sheet. I don’t wanna use days, because
days are no reliable when talking about a portion of a day in a running time of
months/years (I could study 3 hours one day an only 20 minutes others).</p>
<p>That’s all!, or at least for now, until I know what more to write, and boy, I think I will
write a lot (if not, you know I stopped trying and that I’m really terrible at fulfilling
the goals I give myself)</p>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/my-chinese-learning-log</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/my-chinese-learning-log</guid><pubDate>Fri, 15 Jan 2016 19:25:00 GMT</pubDate></item><item><title><![CDATA[Deaf Sign Language]]></title><description><![CDATA[<p><em>This article is based in an essay I wrote for an English class in the second semester of
2015</em></p>
<p>The first time I heard somebody was studying Deaf Sign Language was from my auntie. It
seems that the city is giving free classes to learn the Colombian Deaf Sign Language. But
what is a Deaf Sign Language?.</p>
<p>Before searching a little in Internet, I thought that the Deaf Sign Language was a
language constructed mapping words from a Hearing Language, like Spanish, to hand
gestures. This means, I thought, they only use a different set of skills to carry the
words they are making, just like writing requires a different set of skills to what
speaking requires, thus using the same Spanish grammar as I use. So, basically, if you
want to learn Sign Language, I thought, you only need to learn to write or speak again
using a different set of skills, with your hands mainly.</p>
<p>That sounds right, but it isn’t, I was completely WRONG!.</p>
<p>Actually a Deaf Sign Language (DSL) is a completely, usually, unrelated language to the
language the hearing people speak in the same region. I was really surprised to know that
there isn’t <strong>the</strong> “Spanish” DSL but there is a Colombian DSL, a Mexican DSL, a Spanish
DSL</p>
<p>In my mind I had the idea that every deaf person who lives in a country in which Spanish
is the <em>lingua franca</em> should speak the Spanish deaf version of the language with their
hands, but it is a foolish thought. Yes, ‘we’ were conquered by Spain some hundred years
ago, and yes, ‘we’ (my ancestors) were forced to speak Spanish over whatever language they
spoke, and yes, that is the reason why we speak Spanish, and that why so many people speak
Spanish in a so big and sparse place that is Latin America. But none of that counts for
the DSL, because presumably the conquers didn’t speak any sign language or the language
was never transmitted or forced on the people.</p>
<p>Actually the Spanish (from Spain) DSL has its own roots in the French Sign Language from
the mid-19th century, too late to be carried by the conquers to the “new” world. And also,
there is not as much deaf people as there is hearing people, it is difficult to pass a DSL
from one speaker to another, it is difficult to learn/teach any language if the interested
people are spread all over a region in a low density.</p>
<p>In this sense, spoken/written Spanish and the CSL (Colombian Sign Language), or the
whatever other sign language that is used in a region where is Spanish is spoken, are not
necessarily related. Of course, languages borrow words from each other, and sign languages
are no exception, but Sign Languages are not created by individuals, hearing people for
example, and then learn by deaf, they are just like any other language, they develop from
human interaction.</p>
<p>Languages are developed by the people who use them and in the case of the CSL are the
Colombian deaf community who developed it, or in the case of the Spanish Sign Language
(SSL) are the Spanish deaf community who developed it, etc. This means, SSL and CSL are
probably unintelligible because they were not developed from the same people. This does
not mean that all sign languages totally unrelated between each other either, some of them
make groups of languages and thus belong to the same family, just like Spanish, French,
and Italian belong to the same family.</p>
<p>Summarizing, the deaf sign languages are just like regular hearing languages, they have
their own set of rules for the grammar, spelling (though, many borrow the spelling from a
hearing language to reference places or people, a process called fingerspelling),
vocabulary, and they shape or are shaped by the people who use them. And because the deaf
population from a region tend not to interact with deaf people from other regions, the
languages use to develop independently.</p>
<p>My auntie sing up to learn the CSL because she thought learning a deaf language was an
easy task, something which could distract her from the daily stress of work and family,
and it also could be fun. But as you, dear reader, could guess, what she have though to be
an easy task result in an enormous one. She is learning a new foreign language!, and that
requires her giving a lot of her energy into learn a new grammar, vocabulary, and
hand-body skills. She did not know it at the beginning for sure, but she knows it now, and
now she replies that the administration is losing money with her, because she thinks, she
is a bad languages learner.</p>
]]></description><link>https://helq.github.io/blog/posts/2015/12/en/deaf-sign-language</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2015/12/en/deaf-sign-language</guid><pubDate>Sat, 26 Dec 2015 17:40:00 GMT</pubDate></item><item><title><![CDATA[Splitting video or sound in multiple files - ffmpeg [bash script]]]></title><description><![CDATA[<h2><strong>Edit: 2016-08-02</strong></h2>
<p>I found a <a href="http://unix.stackexchange.com/a/283547">simpler, built-in in ffmpeg aproach</a> to split a sound/video file
in multiple parts with the same time length.</p>
<pre><code class="language-bash">ffmpeg -i 'input_file.mp3' \
       -acodec copy -vcodec copy \
       -f segment -segment_time 600 \
       '%03d_out_name.mp3'
</code></pre>
<p>In this example we have an input file called <code>input_file.mp3</code> and we break it in multiple
files of 10 minutes each (600 seconds). Each output file has a unique name of the form:
<code>XXX_out_name.mp3</code> where <code>XXX</code> represents a 3 digit number.</p>
<h2><em>As a reference, the old article:</em></h2>
<p>The present article describes how to split a video/sound into multiple files of same
duration using ffmpeg. <a href="/blog/data/splitVideo.sh">Click to download automated bash script.</a></p>
<p>With ffmpeg, to copy just a fraction of a sound (<code>.mp3</code>, <code>.wma</code>, <code>.aac</code>, …) or video
file (<code>.mp4</code>, <code>.wma</code>, …) use:</p>
<pre><code class="language-bash">ffmpeg -i &quot;$name&quot; -acodec copy -vcodec copy -t $splitLen -ss $start &quot;$new_name&quot;
</code></pre>
<p>where <code>$name</code> is the name of the file to split, <code>$splitLen</code> is the length in seconds of
the split, <code>$start</code> the second in which the splitting start and the <code>$new_name</code> for the
file.</p>
<p>The idea is to copy fractions of the song (or video) in pieces of the same size, so that
adding all the pieces we get the original song (video). Here a bash function that does the
job:</p>
<pre><code class="language-bash">splitVideo() {
    # name file to split
    name=&quot;$1&quot;
    # splitting time in seconds
    splitLen=$2

    # total of the song
    totalTime=&quot;$(ffprobe -i &quot;$name&quot; -show_format 2&gt; /dev/null | sed -n 's/duration=//p')&quot;
    # number of splits required
    numOfSplits=&quot;$(printf '%.0f\n' $[ totalTime / splitLen ])&quot;

    for i in {0..$numOfSplits}; do
        start=$[ splitLen * i ]

        num=$(printf '%02d' $[i+1])
        new_name=&quot;${name%.*}_${num}.${name//*.}&quot;

        ffmpeg -i &quot;$name&quot; -acodec copy -vcodec copy \
               -t $splitLen -ss $start \
               -metadata &quot;track=$[i+1]&quot; \
               &quot;$new_name&quot;
    done
}
</code></pre>
<p>Mode of use: <code>splitVideo &quot;$name_of_the_file&quot; $time_in_seconds</code>, where <code>$time_in_seconds</code>
is the size of the split in seconds, for example, if you put 600 it means 10 minutes.</p>
<p><a href="/blog/data/splitVideo.sh">Here’s the bash script</a>. It is the same code as in the bash function, just in a
bash file ;)</p>
]]></description><link>https://helq.github.io/blog/posts/2015/08/en/splitting-video-or-sound-in-multiple-files-ffmpeg</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2015/08/en/splitting-video-or-sound-in-multiple-files-ffmpeg</guid><pubDate>Sun, 23 Aug 2015 19:12:00 GMT</pubDate></item></channel></rss>