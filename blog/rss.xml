<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[omnomnomelq - helq's blog]]></title><description><![CDATA[i'm a subtitle!]]></description><link>https://helq.github.io/</link><generator>metalsmith-feed</generator><lastBuildDate>Sat, 23 Dec 2017 16:44:42 GMT</lastBuildDate><atom:link href="https://helq.github.io/blog/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Higher Rank Polymorphism, a beginners explanation using typed lambda calculus]]></title><description><![CDATA[<p><strong>Disclaimer:</strong> I’m not an expert on type systems, I was just trying to figure out what
“higher rank polymorphism” was and found useful to use some ad-hoc typed lambda calculus.
For what I’ve been reading for the last hour, all “code” below is in something close to
“System F” (<a href="https://en.wikipedia.org/wiki/System_F">wikipedia</a>, <a href="https://crypto.stanford.edu/~blynn/lambda/systemf.html">an in-depth explanation of System F with an interpreter
and actual runnable code</a>).</p>
<p>As I understand, Typed Lambda Calculus is the basis of Haskell, so it makes sense to try
to understand what something means in Haskell by studying it first in Typed Lambda
Calculus. For those of you who doesn’t know what lambda calculus is, well, here is a
micro-introduction (if you know what lambda calculus is, jump ahead to the typed lambda
calculus explanation).</p>
<h2>Lambda Calculus</h2>
<p>In the 20’s at the same time Turing was formulating his &quot;Turing Machine&quot;, another guy
called <a href="https://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a> (a friend of Turing) was working, just like Turing, in the
problem of computability, he then formulated what we know now as lambda calculus. They
(Church and Turing) proved that both formulations were equivalent, meaning that anything
you can do with a Turing Machine can be done with Lambda Calculus. Basically, Haskell and
C have the same power to compute anything.</p>
<p>Let’s explain how does lambda calculus works. In Lambda Calculus we have terms, and we can
build them using three rules:</p>
<ul>
<li>Variables: denoted by single characters, e.g., <code>x</code>, <code>a</code>, <code>w</code>, …</li>
<li>Abstraction: with these we can build bigger things out of variables and terms, they’re
like function definitions. Abstractions are denoted by <code>(λx.M)</code> (where <code>x</code> is a variable
and <code>M</code> a term).</li>
<li>Application: abstractions let us build bigger terms, applications let us apply terms to
abstractions (yeah, kinda abstract, let’s see an example).  E.g., <code>(λx.x+1) 2</code> is an
application of <code>(λx.x+1)</code> with the term <code>2</code>, when we <a href="https://ro-che.info/ccc/18" title="A link to a cartoon explaining the difference between equality and reduction">reduce</a><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> this
application we get<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> the term <code>2+1</code><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.  Applications are denoted
by two terms and a space! How weird is that!, I mean, this <code>E M</code>, and this <code>(λx.x+1) 2</code>,
and this <code>y (λx.x**2)</code> are all valid applications (terms) in lambda
calculus<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.</li>
</ul>
<p>With lambda calculus we can do many interesting things, but it’s a little cumbersome and
verbose, for example, to calculate the factorial we define the following terms:</p>
<pre><code class="language-plain">true = \x y . x
false = \x y . y
0 = \f x . x
1 = \f x . f x
succ = \n f x . f(n f x)
pred = \n f x . n(\g h . h (g f)) (\u . x) (\u .u)
mul = \m n f . m(n f)
is0 = \n . n (\x . false) true
Y = \f . (\x . x x)(\x . f(x x))
fact = Y(\f n . (is0 n) 1 (mul n (f (pred n))))
4 = (succ (succ (succ 1)))
</code></pre>
<p>The factorial of 4 can be computed by <code>fact 4</code>. I’ve taken the code above from <a href="https://crypto.stanford.edu/~blynn/lambda/">Ben
Lynn’s notes on Lambda Calculus</a>, you can even try to run the same example right on
Lynn’s page (click on the button that says <em>Factorial</em>).</p>
<p>But well, that’s a pain on the guts to read and understand (unless your into that kind of
stuff ;) ). So, I’m taking some liberties onward to extend this lambda calculus with
numbers, strings and booleans with their respective operations, and allowing recursion.
With this extensions it’s easy to write factorial:</p>
<pre><code class="language-plain">fact = \x. if (x=0) 1 (x * fact (x-1))
</code></pre>
<p>Reducing <code>fact 4</code> would give us:</p>
<pre><code class="language-plain">fact 4
// replacing fact for definition
       = (λx.if (x=0) 1 (x*fact (x-1))) 4
// β-reduction
       = if (4=0) 1 (4*fact (4-1))
// if rule applied, 4 != 0
       = 4 * fact (4-1)
// replacing fact for definition
       = 4 * (λx.if (x=0) 1 (x*fact (x-1))) (4-1)
// β-reduction
       = 4 * if (4-1=0) 1 ((4-1)*fact (4-1-1))
// if rule applied, 4-1 != 0
       = 4 * (4-1) * fact (4-1-1)
       = 4 * (4-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1)
       = 4 * (4-1) * if (4-1-1=0) 1 ((4-1-1)*fact (4-1-1-1))
       = 4 * (4-1) * (4-1-1) * fact (4-1-1-1)
       = 4 * (4-1) * (4-1-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1-1)
       = 4 * (4-1) * (4-1-1) * if (4-1-1-1=0) 1 ((4-1-1-1)*fact (4-1-1-1-1))
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * fact (4-1-1-1-1)
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * (λx.if (x=0) 1 (x*fact (x-1))) (4-1-1-1-1)
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * if (4-1-1-1-1=0) 1 ((4-1-1-1-1)*fact (4-1-1-1-1-1))
       = 4 * (4-1) * (4-1-1) * (4-1-1-1) * 1
       = 4 * (4-1) * (4-1-1) * 1 * 1
       = 4 * (4-1) * 2 * 1 * 1
       = 4 * 3 * 2 * 1 * 1
       = 24
</code></pre>
<p>Well, that’s nice, and “simple” too. In fact I didn’t write that by hand, I let a python
script reduce the expression for me, you can find the python code
<a href="https://github.com/helq/ILLA">here</a><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.</p>
<h2>Typed Lambda Calculus</h2>
<p>Lambda Calculus is nice but it lacks types, and as we know from Haskell, types are
awesome! When we have types, we can ask the compiler/interpreter to dectect if what we’re
saying is coherent or not. Fortunately adding types to lambda calculus is quite simple and
intuitive, and as any good professor I’ll give it to you as an exercise for home by saying
that it’s trivial and left to the reader to finish (take that calculus<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> books :P).</p>
<p>Do you remember that we use <code>λ</code> to create an abstraction using a variable and a term? Well,
in Typed Lambda Calculus<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> we use the character <code>Λ</code> to create an “abstraction”
where the left side holds not a variable but a <strong>type</strong> variable. For example:</p>
<pre><code>ΛT.λx:T.x
</code></pre>
<p>it’s the equivalent lambda expression to <code>λx.x</code> in untyped lambda calculus. If we apply to
the term, for example, <code>Int 5</code><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>, we’ll get:</p>
<pre><code>(ΛT.λx:T.x) Int 5
= (λx:Int.x) 5 // beta-reduction
= 5:Int // beta-reduction
</code></pre>
<p>Note that the type of the whole expression <code>ΛT.λx:T.x</code> is <code>∀X.(X-&gt;X)</code>, meaning that when
we apply any type <code>X</code> to whole the term we get a new term with type <code>X-&gt;X</code>, aka. an
abstraction that “returns” a term with of the same type it gets in. Thus, in typed lambda
calculus we have that any term, with and without type variables, has a type. Let’s look
at some more typed lambda calculus terms (lambda expressions is shorter ;) ):</p>
<pre><code>λx:Int.x+1            // with type: Int -&gt; Int
λx:String.x&lt;&gt;&quot; text&quot;  // String -&gt; String
λx:String.x+1         // String -&gt; String, this definition is inconsistent with + which is defined for numbers only (at least for this explanation)
ΛT.λx:Int.x           // ∀T.(Int-&gt;Int)
ΛX. ΛY. λx:X. λy:Y. x // ∀X.∀Y.X-&gt;Y-&gt;X
</code></pre>
<p>Take a close look at that last example, and make sure you understand it. I’ve gain some
insight by working backwards, reading the type definition <code>∀X.∀Y.X-&gt;Y-&gt;X</code> and trying to
create the term definition.</p>
<p>Let’s apply some types and terms to the lambda expressions above:</p>
<pre><code>(λx:Int.x+1) 5                // Int
(λx:String.x&lt;&gt;&quot; text&quot;) &quot;some&quot; // String
(λx:String.x+1) &quot;more text&quot;   // failure!!! type mismatch of x:String and operator (+):Int-&gt;Int-&gt;Int
(ΛT.λx:Int.x) String 4        // Int

(ΛX. ΛY. λx:X. λy:Y. x) Int          // ∀Y.Int-&gt;Y-&gt;Int
(ΛX. ΛY. λx:X. λy:Y. x) Int String   // Int-&gt;String-&gt;Int
(ΛX. ΛY. λx:X. λy:Y. x) Int String 5 // Int
</code></pre>
<h2>Higher Rank Polymorphism</h2>
<p>Before we explore higher rank polymorphism, I would like to ask you to give me the type
definition of some haskell functions in typed lambda calculus. For that we will need to
translate the haskell code into typed lambda calculus, and get the type definition from
there. For example, the process to get the type of <code>map</code> on typed lambda calculus would
be:</p>
<h3><code>map</code>'s into typed lambda calculus</h3>
<p>Given <code>map</code>'s definition:</p>
<pre><code class="language-haskell">map _ []     = []
map f (x:xs) = f x : map f xs
</code></pre>
<p>we can rewrite it as the untyped lambda expression<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>:</p>
<pre><code>map = λf.λxs.if (xs=nil) nil (cons ((f (car xs)) (map f (cdr xs))))
</code></pre>
<p>Notice, how the lack of pattern matching on lambda expressions forces us to check if the
list is empty, in case the list is empty we return an empty list, otherwise we return a
new list applying the function at the first element of the list and applying map
recursively to the rest of the list. Rewritten back into Haskell, we’d get:</p>
<pre><code class="language-haskell">map f xs = if null xs
            then []
            else f (head xs) : map f (last xs)
</code></pre>
<p>Finally writing it into typed lambda calculus, we’d get<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup>:</p>
<pre><code>map = ΛX.ΛY.λf:X-&gt;Y.λxs:[X].if (xs=nil) nil (cons ((f (car xs)) (map f (cdr xs))))
</code></pre>
<p>with type:</p>
<pre><code>∀X.∀Y.(X-&gt;Y)-&gt;[X]-&gt;[Y]
</code></pre>
<p>Here is where I want you to notice how this type looks very similar to the haskell type
for <code>map</code>:</p>
<pre><code class="language-haskell">Prelude&gt; :t map
map :: (a -&gt; b) -&gt; [a] -&gt; [b]
</code></pre>
<p>but there is no <code>∀X.∀Y.</code> in that haskell type, or there is? (yeah, it is there, but it is
implicit). You can define you’re own <code>map</code> function and specify the type you want for it
using <code>forall</code> in the type definition (available in the extension <code>RankNTypes</code>):</p>
<pre><code>$ ghci -XRankNTypes
Prelude&gt; let rmap f xs = if null xs then [] else f (head xs) : rmap f (tail xs); rmap :: forall a. forall b. (a-&gt;b) -&gt; [a] -&gt; [b]
</code></pre>
<p>Notice the type definition <code>rmap :: forall a. forall b. (a-&gt;b) -&gt; [a] -&gt; [b]</code>, it’s very
similar to the type of our typed lambda expression. Unfortunatelly, haskell ignores all
<code>forall</code>'s (when they’re rank 1), so we get in console the type:</p>
<pre><code>Prelude&gt; :t rmap
rmap :: (a -&gt; b) -&gt; [a] -&gt; [b]
</code></pre>
<p>By the way, functions with <code>forall</code> in their type definition are called <strong>polymorphic</strong>.</p>
<h3>More typed lambda expressions</h3>
<p>Now, a little exercise for you, get the type definitions of the following Haskell
functions using <code>forall</code>.</p>
<pre><code class="language-haskell">foldl _ z []     = z
foldl f z (x:xs) = foldl f (f z x) xs

const a _ = a

length []     = 0
length (_:xs) = 1 + length xs

fst (a, b) = a
</code></pre>
<p>And the answers are:</p>
<pre><code class="language-haskell">foldl :: forall a b. (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a
const :: forall a b. a -&gt; b -&gt; a
length :: forall a. [a] -&gt; Int
fst :: forall a b. (a, b) -&gt; a
</code></pre>
<p>Well, it wasn’t that hard, was it?</p>
<h3>Higher Rank Polymorphism (finally)</h3>
<p>What should be the type of <code>weird</code> (defined below), if we want to call it with parameters
<code>id 5 &quot;ho&quot;</code>?</p>
<pre><code class="language-haskell">weird g a s = (g a, g s)
</code></pre>
<p>Our first guess could be:</p>
<pre><code class="language-haskell">weird :: forall x y. (x-&gt;x) -&gt; y -&gt; String -&gt; (y, String)
</code></pre>
<p>but Haskell objects:</p>
<pre><code class="language-plain">&lt;interactive&gt;:18:27: error:
    • Couldn't match expected type ‘x’ with actual type ‘String’
      ‘x’ is a rigid type variable bound by
        the type signature for:
          weird :: forall x y. (x -&gt; x) -&gt; y -&gt; String -&gt; (y, String)
        at &lt;interactive&gt;:18:46
    • In the first argument of ‘g’, namely ‘s’
      In the expression: g s
      In the expression: (g a, g s)
    • Relevant bindings include
        g :: x -&gt; x (bound at &lt;interactive&gt;:18:11)
        weird :: (x -&gt; x) -&gt; y -&gt; String -&gt; (y, String)
          (bound at &lt;interactive&gt;:18:5)
</code></pre>
<p>But, what does that mean? Basically, that <code>x</code> was expected to be of the type <code>String</code>, and
that’s weird, because we wrote <code>forall x</code> to tell the type inference system that it should
expect to receive a polymorphic function <code>x-&gt;x</code>.</p>
<p>What the heck is happening?!</p>
<p>Well, to understand why that type doesn’t really work, we can rewrite our function as a
typed lambda expression:</p>
<pre><code>weird = ΛY. ΛX. λg:(X-&gt;X). λa:Y.  λs:String. (g a, g s)
</code></pre>
<p>with type (we hope):</p>
<pre><code>∀Y.∀X.(X-&gt;X)-&gt;Y-&gt;String-&gt;(Y, String)
</code></pre>
<p>and try on our own to reduce the application <code>weird Int String (λb.b) 5 &quot;ho&quot;</code>.</p>
<pre><code class="language-plain">weird Int String (λb.b) 5 &quot;ho&quot;
  = (ΛY. ΛX. λg:(X-&gt;X). λa:Y. λs:String. (g a, g s)) Int String (λb.b) 5 &quot;ho&quot;
  = (ΛX. λg:(X-&gt;X). λa:Int. λs:String. (g a, g s)) String (λb.b) 5 &quot;ho&quot;
  = (λg:(String-&gt;String). λa:Int. λs:String. (g a, g s)) (λb.b) 5 &quot;ho&quot;        // g:(λX.X) stops being polymorphic!!!
  = (λa:Int. λs:String. ((λb:String.b) a, (λb:String.b) s)) 5 &quot;ho&quot;
  = (λs:String. ((λb:String.b) (5:Int), (λb:String.b) s)) &quot;ho&quot;
  = ((λb:String.b) (5:Int), (λb:String.b) (&quot;ho&quot;:String))
  FAIL!! 5 has type `Int` but (λb:String.b) requires 5 to be `String`
</code></pre>
<p>Now you know why it fails? Yeah, going from line 3 to 4 the type of <code>g</code> gets converted from what
we expected to be polymorphic <code>∀X.X-&gt;X</code> to <code>String-&gt;String</code>. What does this mean, is that we’re
forcing to pick the type of <code>X-&gt;X</code> when we give the type of the first element <code>a</code>. At the
end, the real type of the whole lambda expression is:</p>
<pre><code>∀Y.∀X.(String-&gt;String)-&gt;String-&gt;String-&gt;(String, String)
</code></pre>
<p>to prove it, let’s reduce the expression <code>weird String String (λb.b) &quot;hi&quot; &quot;ho&quot;</code>:</p>
<pre><code class="language-plain">weird String String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (ΛY. ΛX. λg:(X-&gt;X). λa:Y. λs:String. (g a, g s)) String String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (ΛX. λg:(X-&gt;X). λa:String. λs:String. (g a, g s)) String (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (λg:(String-&gt;String). λa:String. λs:String. (g a, g s)) (λb.b) &quot;hi&quot; &quot;ho&quot;
  == (λa:String. λs:String. ((λb:String.b) a, (λb:String.b) s)) &quot;hi&quot; &quot;ho&quot;
  == (λs:String. ((λb:String.b) &quot;Hi&quot;:String, (λb:String.b) s:String)) &quot;ho&quot;
  == ((λb:String.b) (&quot;Hi&quot;:String), (λb:String.b) (&quot;ho&quot;:String))
  == ((&quot;Hi&quot;:String), (λb:String.b) (&quot;ho&quot;:String))
  == (&quot;Hi&quot;:String, &quot;ho&quot;:String)
</code></pre>
<p>You may think, there is no way to do make our function behave like we wanted to, but there
is something we haven’t explored (and I haven’t tell you on purpose), we can define the
type of <code>g</code> using <code>∀</code>!  Mmmm…, let’s see what happens if we rewrite our typed lambda
expression to make <code>g</code>'s definition polymorphic:</p>
<pre><code>weird = ΛY. λg:(∀X.(X-&gt;X)). λa:Y. λs:String. (g Y a, g String s)
</code></pre>
<p>and now, the type of <code>weird</code> would be:</p>
<pre><code>∀Y.(∀X.X-&gt;X)-&gt;Y-&gt;String-&gt;(Y, String)
</code></pre>
<p>Notice how <code>g</code> receives two parameters now! The first is the type and the second is a term.
Reducing the application <code>weird Int (ΛX.λb:X.b) 5 &quot;hi&quot;</code> we get:</p>
<pre><code class="language-plain">weird Int (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (ΛY. λg:(∀X.(X-&gt;X)). λa:Y. λs:String. (g Y a, g String s)) Int (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (λg:(∀X.(X-&gt;X)). λa:Int. λs:String. (g Int a, g String s)) (ΛX.λb:X.b) 5 &quot;hi&quot;
  == (λa:Int. λs:String. ((ΛX.λb:X.b) Int a, (ΛX.λb:X.b) String s)) 5 &quot;hi&quot;
  == (λs:String. ((ΛX.λb:X.b) Int 5, (ΛX.λb:X.b) String s)) &quot;hi&quot;
  == ((ΛX.λb:X.b) Int 5, (ΛX.λb:X.b) String &quot;hi&quot;)
  == ((λb:Int.b) 5, (ΛX.λb:X.b) String &quot;hi&quot;)
  == (5:Int, (ΛX.λb:X.b) String &quot;hi&quot;)
  == (5:Int, (λb:String.b) &quot;hi&quot;)
  == (5:Int, &quot;hi&quot;:String)
</code></pre>
<p>Awesome, it worked! If we translate it back to Haskell, we get:</p>
<pre><code>Prelude&gt; let weird g a s = (g a, g s); weird :: forall y. (forall x. x-&gt;x) -&gt; y -&gt; String -&gt; (y, String)
Prelude&gt;
</code></pre>
<p>and</p>
<pre><code>Prelude&gt; weird id 5 &quot;ho&quot;
(5,&quot;ho&quot;)
Prelude&gt; :t weird id (5::Int) &quot;ho&quot;
weird id (5::Int) &quot;ho&quot; :: (Int, String)
Prelude&gt;
</code></pre>
<p><code>weird</code> is then what is called a <strong>rank-2 polymorphic function</strong> ;), it’s rank-2 because
it has a <code>forall</code> nested inside. By default Haskell doesn’t understand rank-2 functions,
so to define them we need to use the GHC extension <code>RankNTypes</code> which we were using in the
examples above.</p>
<p>Further readings:</p>
<ul>
<li><a href="https://en.wikibooks.org/wiki/Haskell/Polymorphism">Polymorphism (Haskell Wikibook)</a></li>
<li><a href="https://ocharles.org.uk/blog/guest-posts/2014-12-18-rank-n-types.html">24 Days of GHC Extensions: Rank N Types</a></li>
<li><a href="https://apocalisp.wordpress.com/2010/07/02/higher-rank-polymorphism-in-scala/">Higher-Rank Polymorphism in Scala</a></li>
<li><a href="https://elmanantialdebits.blogspot.com.co/2010/04/polimorfismo-de-rango-superior.html">Polimorfismo de Rango Superior (spanish for Higher Rank Polymorphism)</a></li>
<li><a href="https://crypto.stanford.edu/~blynn/lambda/">Lambda Calculus by Ben Lynn</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1"  class="footnote-item"><p>Lambda Calculus is like maths written on paper, you need an interpreter
(in the case of a piece of paper, the intrepreter will be your head), an iterpreter that
transforms an term into another term by applying a set of rules. In lambda calculus,
there are two main rules to transform between different terms: <strong>alpha-conversion</strong>
(renaming of variables inside an abstraction, e.g., <code>(λy.y+1)</code> gets alpha-converted into
<code>(λm.m+1)</code> or <code>(λz.z+1)</code>, …), and <strong>beta-reduction</strong> (gets the right side of an
application and replaces all appeareances of the variable on the abstraction on the left
side of the application, e.g., <code>(λx.x+1) 2</code> gets beta-reduced into <code>2+1</code><sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3]</a></sup>) <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2"  class="footnote-item"><p>Using beta-reduction. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3"  class="footnote-item"><p><code>2+1</code> can be further reduced to <code>3</code> by using the intuitive rule of adding, or
if you want to be less pragmatic write <code>2</code>, <code>1</code>, <code>+</code>, and <code>2+1</code> as pure lambda calculus
terms. Some guidence on that can be found in the wikipedia
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">here</a>, you nerds. <a href="#fnref3" class="footnote-backref">↩</a> <a href="#fnref3:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn4"  class="footnote-item"><p>wait, that’s looks just like Haskell code!. Well, we can do after all
this <code>sum list</code> (with <code>list = [1..10]</code>, for example), this <code>(\x-&gt;x+1) 2</code>, and this
<code>y (\x-&gt;x**2)</code> (with <code>y f = f 3</code> or <code>y = ($3)</code>, for example) in Haskell. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5"  class="footnote-item"><p>Sorry if you see too many spelling mistakes on the python script, it’s some code
I wrote some years ago for a class on “compilers”<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>, I didn’t know any better
at that time. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6"  class="footnote-item"><p>ikr, shameless self-promotion. <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
<li id="fn7"  class="footnote-item"><p>or should it be <em>calculi</em>? <em>calculuses</em>? <em>calculus’s</em>? <em>calculises’</em>??? <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8"  class="footnote-item"><p>In <a href="https://en.wikipedia.org/wiki/System_F">System F</a> to be more precise <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9"  class="footnote-item"><p>Note that I’m abusing (“extending”) again the notation of lambda calculus to
add some simple and intuitive types like <code>String</code>, <code>Int</code> and <code>Bool</code>. Also, I need to
aknowledge <a href="https://elmanantialdebits.blogspot.com.co/2010/04/polimorfismo-de-rango-superior.html">this awesome post</a> which got me thinking on type lambda
calculus and Higher Order Polymorphism. <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
<li id="fn10"  class="footnote-item"><p><code>cons</code>, <code>car</code> and <code>cdr</code> are some simple functions to operate with tuples in
languages like lisp (<code>cons</code> creates a new tuple from two values, <code>car</code> and <code>cdr</code> take a
tuple and return its first element and second element, respectively)<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>. Lisp
was designed directly from untyped lambda calculus, thus it’s easier to write an
expression first in lisp and then translate it into a lambda expresion of untyped lambda
calculus. <a href="#fnref10" class="footnote-backref">↩</a></p>
</li>
<li id="fn11"  class="footnote-item"><p>We may think that the “equivalents” of <code>cons</code>, <code>car</code> and <code>cdr</code> in haskell
would be <code>(,)</code>, <code>fst</code> and <code>snd</code>, but they aren’t! they behave different to the original
lisp’s definitions, it is not possible to create a list using only <code>(,)</code>'s (unless you
wrapped <code>(,)</code> in a newtype definition and did some more trickery), i.e., this fails in
haskell: <code>range n m = if n&gt;m then () else (n, range (n+1) m)</code>, but this works just fine
in lisp: <code>(defun range (n m) (cons n (range (+ n 1) m)))</code><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> <a href="#fnref11" class="footnote-backref">↩</a></p>
</li>
<li id="fn12"  class="footnote-item"><p>yeah, those are a lot of brackets! It’s after all called LISP (Lots of
Irritating Superfluous Parentheses) <a href="#fnref12" class="footnote-backref">↩</a></p>
</li>
<li id="fn13"  class="footnote-item"><p>you know the drill, I’m extending the typed lambda calculus with lists, and
their type is represented by the type <code>[] a</code> or <code>[a]</code> (which has kind: unary type constructor<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>). <a href="#fnref13" class="footnote-backref">↩</a></p>
</li>
<li id="fn14"  class="footnote-item"><p>kinds are another extension to Lambda Calculus which give us the power to
parametrize types, it’s another whole topic (and to be honest, I don’t get it
completely), you can find more info in the <a href="https://en.wikipedia.org/wiki/Kind_(type_theory)">wikipedia</a>. <a href="#fnref14" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></description><link>https://helq.github.io/blog/posts/2017/06/en/haskell-s-higher-rank-polymorphism</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2017/06/en/haskell-s-higher-rank-polymorphism</guid><pubDate>Wed, 28 Jun 2017 18:08:00 GMT</pubDate></item><item><title><![CDATA[Chinese Log - Step 2: Learning Pronunciation]]></title><description><![CDATA[<p><em>This article is part of a series of posts on my Chinese learning experience,</em> <em>for more
information visit the <a href="/blog/posts/2016/01/en/my-chinese-learning-log/">main series page</a></em></p>
<p>My first ‘real’ step into learning Chinese has been to learn the pronunciation of vowels
and consonants in Chinese (or rather, the initials and finals), and later combine them and
learn to distinguish between the different tones.</p>
<p>The Chinese syllables are composed of two parts an (optional) initial and a final, so my
first step was getting to know the initials and the finals. But first of all, I learnt the
basics of IPA:</p>
<h2>1. IPA</h2>
<p>I use IPA to know approximately the sound of every consonant and vowel. For an explanation
of the IPA system visit <a href="https://fluent-forever.com/chapter3/">IPA explanation | Pronunciation/Ear training</a>
from <a href="https://fluent-forever.com">Fluent Forever</a>, it is fundamental!.</p>
<p>Then you can read <a href="https://en.wikipedia.org/wiki/Help:IPA_for_Mandarin">IPA for Chinese</a>.</p>
<p>And don’t forget to read the <a href="https://en.wikipedia.org/wiki/Pinyin">Pinyin Article (wikipedia)</a>
as we will base our learning in pinyin.</p>
<h2>2. Initials</h2>
<p>For the initials I first read the Wikipedia’s Pinyin Article (or some of it) and then I
create an <a href="http://ankisrs.net/">Anki</a> Deck with “all” the initials using different audio
recordings (links to all audio sources at the bottom of this post), you can download the
deck from <a href="https://ankiweb.net/shared/decks/">Anki Shared Decks</a>:
<a href="https://ankiweb.net/shared/info/2069190049">Pinyin - Initials - Multiple recordings per initial</a>,
<strong>NOTE:</strong> the deck uses the Anki Addon <a href="https://ankiweb.net/shared/info/498789867">Replay Button</a>
and relays heavily on it to work, thus this Anki Deck only works in Desktop Anki and its
installation is mandatory.</p>
<p>I got the IPA transcriptions from <a href="http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart">All Set Learning</a>
and slightly modified them with the Pinyin/IPA Description from Wikipedia’s Article.</p>
<h2>3. Finals</h2>
<p>For the finals I did exactly the same as with the initials. You can find the deck from
ankiweb: <a href="https://ankiweb.net/shared/info/509132394">Pinyin - Finals - Multiple recordings per final sound</a>.</p>
<h2>4. Pairs of difficult sounds</h2>
<p>Some sounds are incredibly difficult for me to tell them apart, but as I read in
<a href="https://fluent-forever.com/gallery/ear-training-flashcards/">Fluent Forever</a>,
I could just hear one recording (<a href="http://www.sciencealert.com/here-are-4-key-strategies-for-remembering-everything-you-learn">repeat it</a>)
and try to guess to which of two sounds does it correspond. For that, I create (guess
what) an Anki Deck. For space reasons, I uploaded the <a href="/blog/data/pinyin/Pinyin__Pairs-v0.1.apkg">deck alone</a>
(without the media files (audios)) and the media files separated in a <code>.zip</code> file, which
you can find at the bottom of the post.</p>
<p>To add new pairs you only need to create (it’s called <code>add</code> in Anki) a new card and fill
the fields with the right information:</p>
<ul>
<li><strong>Pair Sounds:</strong> Sounds that are difficult for you to differentiate</li>
<li><strong>Written Sound 1:</strong> The first of the two (or three) difficult sounds</li>
<li><strong>IPA 1:</strong> First sound IPA notation</li>
<li><strong>Written Sound 2:</strong> Same as 1</li>
<li><strong>IPA 2:</strong> Same as 1</li>
<li>…</li>
<li><strong>Audio 1:</strong> Audios followed by their IPA notation, don’t forget to separate each audio
with an <code>EOF</code></li>
<li><strong>Audio 2:</strong> Same as <code>Audio 1</code></li>
<li>…</li>
<li><strong>Extra Info:</strong> Additional info you want to be displayed in the “back” of the card.</li>
</ul>
<p>You can get the audio and its IPA notation from the file:
<a href="/blog/data/pinyin/all_with_IPA_per_sound-v0.1.csv">all_with_IPA_per_sound.csv</a>.
I got all right pinyin sound possibilities from
<a href="http://www.archchinese.com/chinese_pinyin.html">ArchChinese</a>.</p>
<h2>5. Tones</h2>
<p>In <a href="/blog/data/pinyin/Pinyin__Tones-v0.1.apkg">this Anki Deck</a> you will find 30 cards to
practice tones. Every time a card is displayed an audio will play with a random tone (from
one of the four “possible” tones), and you need to guess which one it is.</p>
<p><strong>Note:</strong> this Anki Deck is huge, in fact it contain all the pinyin sounds which are
spoken (not all the possible pinyin and tones combinations, those are many more). You can
find the audio media on a zip at the bottom of this post.</p>
<p>Beware: there are two kinds of 3rd tones in the recordings. The first, the 'traditional’,
the tone that is learn everywhere, and the second, the ‘spoken’ or ‘real’ tone, the tone
which you should learn to speak Chinese for a detailed explanation see
<a href="http://www.sinosplice.com/life/archives/2008/12/10/toward-better-tones-in-natural-speech">Toward Better Tones in Natural Speech</a>.</p>
<hr>
<h2>Sources</h2>
<p>Sources of all the audios present in the compressed file (see “Deck and media downloads”
below) and the anki decks. All credit goes to the corresponding webpages:</p>
<ol>
<li><a href="http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart">http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart</a>
(the audios from this source appear in the compressed file with an <code>_1</code> at the end)</li>
<li><a href="https://chinese.yabla.com/chinese-pinyin-chart.php">https://chinese.yabla.com/chinese-pinyin-chart.php</a>
(<code>_2</code> is the postfix for all audios from this source)</li>
<li><a href="http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table">http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table</a>
(<code>_3</code> so on …)</li>
<li><a href="http://www.archchinese.com/chinese_pinyin.html">http://www.archchinese.com/chinese_pinyin.html</a></li>
<li><a href="http://pinpinchinese.com/pinyin-chart/">http://pinpinchinese.com/pinyin-chart/</a></li>
<li><a href="http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html">http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html</a></li>
<li><a href="http://lost-theory.org/chinese/phonetics/">http://lost-theory.org/chinese/phonetics/</a></li>
<li><a href="http://www.china-on-site.com/language/phonetic/phonetic.htm">http://www.china-on-site.com/language/phonetic/phonetic.htm</a>
(this is the only source which audio doesn’t have a numeration in the audio saved in
the card decks)</li>
</ol>
<hr>
<h2>Deck and media downloads</h2>
<ul>
<li>All audios (Anki’s ‘Media Folder’ compressed):
<a href="https://www.mediafire.com/?vpbv0m0me7b81zg">collection.media.zip (version 0.1)</a>
(mediafire).  You need this! Extract it under your personal Anki Media Folder.</li>
<li>Anki Addon: <a href="https://ankiweb.net/shared/info/498789867">Replay Button</a> You need this!</li>
<li><a href="/blog/data/pinyin/Pinyin__Initials-v0.1.apkg">Initials deck</a> (version 0.1)
Alternative download <a href="/blog/data/pinyin/initials-v0.1.csv">csv file</a></li>
<li><a href="/blog/data/pinyin/Pinyin__Finals-v0.1.apkg">Finals deck</a> (version 0.1)
Alternative download <a href="/blog/data/pinyin/finals-v0.1.csv">csv file</a></li>
<li><a href="/blog/data/pinyin/Pinyin__Pairs-v0.1.apkg">Pairs deck</a> (version 0.1)
Alternative download <a href="/blog/data/pinyin/pairs-v0.1.csv">csv file</a></li>
<li><a href="/blog/data/pinyin/Pinyin__Tones-v0.1.apkg">Tones deck</a> (version 0.1)
Alternative download <a href="/blog/data/pinyin/tones-v0.1.csv">csv file</a></li>
<li><a href="/blog/data/pinyin/all_with_IPA_per_sound-v0.1.csv">All spoken pinyin combinations</a>
csv file (version 0.1)</li>
</ul>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-2</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-2</guid><pubDate>Tue, 19 Jan 2016 00:45:00 GMT</pubDate></item><item><title><![CDATA[Chinese Log - Step 1: Searching for Resources]]></title><description><![CDATA[<p><em>This article is part of a series of posts on my Chinese learning experience,</em> <em>for more
information visit the <a href="/blog/posts/2016/01/en/my-chinese-learning-log/">main series page</a></em></p>
<p>Here are the web pages I found useful when reading about Chinese Language as a complete
beginner (huh, I’m talking like I knew Chinese, for the record: I’m a beginner!). Not all
links are meant to be helpful for the beginner though, they’re just resources I found
useful.</p>
<p>The bold links are the most relevant for the first stage of the learning process, the
pronunciation part. But I think it’s worthed to read all the links to get an initial
picture of the Chinese language.</p>
<h2>First of all, why do you wanna learn chinese?</h2>
<ul>
<li><strong><a href="http://www.hackingchinese.com/goals-and-motivation-part-1-introduction/">Goals and motivation, part 1 – Introduction</a></strong>
(my answer: just to know a different language. I wanted to learn French, Portuguese, or
Chinese, and I decide for Chinese because is the hardest from my mother language
(Spanish))</li>
<li><strong><a href="http://www.sciencealert.com/here-are-4-key-strategies-for-remembering-everything-you-learn">How to learn effectively</a></strong>
Few science based tips to improve learning, so you can achieve your learning goals (part
of the reason why am I writing this in the first place ;) )</li>
</ul>
<h2>About pronunciation and Pinyin</h2>
<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/Help:IPA_for_Mandarin">IPA for Mandarin</a></strong> Take a look
at the awesome chart in the wikipedia. Learn what is IPA and how can you use it to learn
a new language.</li>
<li><strong><a href="https://fluent-forever.com/chapter3/">IPA explanation | Pronunciation/Ear training</a></strong>
A clear explanation of IPA.</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Pinyin">Pinyin - Wikipedia</a></strong> An explanation of pinyin.</li>
<li><strong><a href="http://www.sinosplice.com/learn-chinese/pronunciation-of-mandarin-chinese">Chinese Pronunciation</a></strong>
A detailed explanation of those difficult sounds in Chinese (for English speakers). The
post gives interesting tips on how to pronounce the tricky j,q,x, zh,ch, sh,z,c,s
sounds, even if you’re not a native English speaker his explanation could help you a
lot.</li>
<li><a href="http://www.hackingchinese.com/learning-pronunciation-as-a-beginner/">Learning Chinese pronunciation as a beginner</a>
Motivational post for pronunciation.</li>
<li><a href="https://www.youtube.com/watch?v=UuX9F5emdk0">Mandarin Chinese Tones</a>
An explanation on how to produce the tones in Chinese.
<a href="https://www.youtube.com/watch?v=3wV8B4bx1lM">One more from Yangyang</a></li>
<li><a href="http://www.hackingchinese.com/24-great-resources-for-improving-your-mandarin-pronunciation/">24 Resources for improving pronunciation</a></li>
<li>Some Pinyin Charts:
<ul>
<li><a href="https://en.wikipedia.org/wiki/Pinyin_table">Pinyin Table - Wikipedia</a></li>
<li><strong><a href="http://resources.allsetlearning.com/chinese/pronunciation/Pinyin_chart">Pinyin Chart - All Set Learning</a></strong>
it also has each pinyin in IPA</li>
<li><a href="http://www.ichineselearning.com/learn/pinyin-chart.html">iChineseLearning Chart</a></li>
<li><strong><a href="http://www.yoyochinese.com/chinese-learning-tools/Mandarin-Chinese-pronunciation-lesson/pinyin-chart-table">Yoyo Chinese</a></strong>
it has an special emphasis in the 3rd tone as a low tone (or half-3rd-tone)</li>
<li><a href="http://www.archchinese.com/chinese_pinyin.html">ArchChinese Chart</a></li>
<li><a href="http://talkbank.org/pinyin/Trad_chart_IPA.php">Traditional Pinyin Chart in IPA - TalkBank</a></li>
<li><a href="https://chinese.yabla.com/chinese-pinyin-chart.php">Pinyin Chart - Yabla</a></li>
<li><a href="http://lost-theory.org/chinese/phonetics/">Mandarin Chinese Phonetics Table - Lost Theory</a></li>
<li><a href="http://public.gettysburg.edu/~jli/PinYinChart/ChinesePinYinChartM.html">Chinese Pinyin Chart - Gettysburg College</a></li>
</ul></li>
<li>About the third tone:
<ul>
<li><strong><a href="http://www.sinosplice.com/life/archives/2008/12/10/toward-better-tones-in-natural-speech">Toward Better Tones in Natural Speech</a></strong></li>
<li><strong><a href="http://www.hackingchinese.com/learning-the-third-tone/">Learning the third tone</a></strong></li>
<li><strong><a href="https://www.youtube.com/watch?v=aAqayUpWr_o">How to pronounce the 3rd tone like a native</a></strong>
A video if you feel like not reading the other to resources ;).</li>
</ul></li>
<li><strong><a href="http://www.hackingchinese.com/focusing-on-tone-pairs-to-improve-your-mandarin-pronunciation/">Tone pairs for improving
pronunciation</a></strong></li>
<li><strong><a href="http://www.sinosplice.com/learn-chinese/tone-pair-drills">Tone pair drills</a></strong></li>
<li><a href="https://en.wikipedia.org/wiki/Standard_Chinese_phonology">Standard Chinese phonology</a>
I left this at last because I haven’t even finish reading it. But it’s the wikipedia,
so, I think, it has valuable information.</li>
</ul>
<h2>About books</h2>
<ul>
<li><strong><a href="http://www.amazon.com/Assimil-Language-Courses-Chinese-compact/dp/0320006158">Assimil Chinese with Ease</a></strong>
Book focus in self-learning</li>
<li><a href="http://www.amazon.com/Schaums-Outline-Chinese-Grammar-Claudia/dp/0071377646">Schaum’s Outline of Chinese Grammar</a></li>
<li><a href="http://www.amazon.com/Modern-Mandarin-Chinese-Grammar-Practical/dp/0415827140?tag=duckduckgo-ffab-20">Modern Mandarin Chinese Grammar: A Practical Guide</a></li>
<li><a href="http://www.amazon.com/Reading-Writing-Chinese-Characters-Compounds/dp/080484299X">Reading and Writing Chinese: Third Edition</a>
I’m not sure if this book is good because I don’t plan to learn to write in Chinese
until I have the enough knowledge to understand Spoken Chinese.</li>
</ul>
<h2>Characters</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Chinese_characters">Chinese Characters - Wikipedia</a>
(Man, I love the wikipedia so much)</li>
<li><a href="http://www.learnchineseok.com/2012/05/write-chinese-radicals-symbol-letters.html">Learn Chinese characters through radicals, etymology, …</a></li>
<li><strong><a href="http://languagelog.ldc.upenn.edu/nll/?p=189">How to learn to read Chinese</a></strong>
this and other posts motivated me to not study the characters in the beginning, but
rather when I’m experienced in the language. For more:
<a href="http://languagelog.ldc.upenn.edu/nll/?p=10554">How to learn Chinese and Japanese</a></li>
<li><a href="https://web.archive.org/web/20150618081452/http://www.zein.se/patrick/chinen9p.html">Introduction to Chinese Characters</a></li>
<li><a href="http://www.hanzicraft.com/">Character decomposition</a>
(should this be in the dictionary list of resources below?)</li>
</ul>
<h2>About Grammar</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Chinese_grammar">Chinese Grammar - Wikipedia</a></li>
<li><a href="http://resources.allsetlearning.com/chinese/grammar">Chinese Grammar Wiki</a></li>
<li><a href="http://www.rci.rutgers.edu/~rsimmon/chingram/">Basic Chinese Grammar</a></li>
<li><a href="http://chinese.stackexchange.com/questions/16246/descriptive-generative-grammar-of-mandarin">StackExchange discussion about resources for chinese grammar</a></li>
<li><a href="https://fluent-forever.com/learning-grammar-without-translation/">Learning grammar and abstract words without translation</a>
A little tip to learn grammar without using translation (or trying it)</li>
</ul>
<h2>Software</h2>
<ul>
<li><a href="https://ankiweb.net/shared/info/235147699">Timo’s All-In-One Chinese Deck</a>
a deck to use with <a href="http://ankisrs.net/">Anki</a></li>
<li><a href="http://www.hackingchinese.com/using-audacity-to-learn-chinese-speaking-and-listening/">Using Audacity to learn Chinese</a></li>
<li><a href="http://www.fon.hum.uva.nl/praat/">Praat</a> software to study phonetics, how to use it:
<a href="http://www.sinosplice.com/life/archives/2008/01/21/seeing-the-tones-of-mandarin-chinese-with-praat">Seeing the Tones of Mandarin Chinese with Praat</a></li>
</ul>
<h2>Dictionaries and word lists</h2>
<ul>
<li><a href="http://ce.linedict.com/dict.html#/cnen/home">Line Dict</a></li>
<li><a href="http://www.hskhsk.com/word-lists.html">HSK Lists</a> word lists from the
<a href="https://en.wikipedia.org/wiki/Hanyu_Shuiping_Kaoshi">Chinese Proficiency Test</a></li>
<li><a href="http://www.pleco.com/">Pleco dictionary</a></li>
<li><a href="http://forvo.com/languages/zh/">Forvo</a> a web data base for thousands of word recordings
in many languages</li>
</ul>
<h2>Audios y videos</h2>
<ul>
<li><a href="https://chinesepod.com/">Chinesepod</a> podcasts in Chinese/English with different levels
of difficulty, and other audio/video resources.</li>
<li><a href="http://english.cntv.cn/learnchinese/">CCTV Learn Chinese</a>
national Chinese news for foreigners</li>
<li><a href="http://www.slow-chinese.com/">Slow Chinese</a>
Podcasts in a slow Chinese, specially for learners</li>
<li>I heard from <a href="https://www.youtube.com/watch?v=GjYXMFVOTmk">this guy (Steve Kaufmann)</a>
that the dialogs from &quot;Xiang Sheng 相声 (crosstalk)&quot; usually emphasize on the tones, so
search for them, and tell me what you think.</li>
<li><a href="http://www.fluentu.com/">FluentU</a> a platform with videos subtitled in English and Chinese</li>
<li>More audio video resources (<em>advanced</em>, but saved for the future):
<ul>
<li>Manhua (“chinese manga”):
<ul>
<li><a href="http://myanimelist.net/topmanga.php?type=manhua">Manhua - My Anime List</a></li>
<li><a href="http://manga.about.com/od/recommendedreading/tp/ChineseManhua.htm">Chinese Manhua, Comics and Graphic Novels</a></li>
</ul></li>
<li>Chinese Animation (or “Chinese Anime” if you like):
<ul>
<li><a href="http://sinomotion.tumblr.com">Sino Motion</a></li>
</ul></li>
</ul></li>
<li><a href="http://www.chinese-forums.com/index.php?/topic/24097-tv-series-recommendations-and-index-thread/">TV Series Recommendations - Chinese-forums.com</a></li>
</ul>
<h2>(more) web pages for learning Chinese</h2>
<ul>
<li><a href="http://livemocha.com/pages/languages/learn-mandarin-chinese/">Learn Chinese - Livemocha</a></li>
<li><a href="http://www.chinese-skill.com/cs.html">ChineseSkill</a> Chinese doulingo-ish app</li>
<li><a href="http://www.archchinese.com/">ArchChinese</a> dictionary, flashcards, tones, …</li>
</ul>
<h2>More resources pages</h2>
<ul>
<li><a href="http://www.iwillteachyoualanguage.com/resources/mandarin-chinese-resources/">111 Mandarin Chinese resources you wish you knew</a></li>
<li><a href="https://eastasiastudent.net/china/mandarin/chinese-learning-tools/">My favourite Chinese learning tools</a></li>
<li><a href="https://chinese.stackexchange.com/questions/1120/resources-for-learning-mandarin-chinese">Resources for learning Mandarin Chinese - StackExchange</a></li>
</ul>
<h2>And some random stuff</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Lion-Eating_Poet_in_the_Stone_Den">Lion-Eating Poet in the Stone Den</a></li>
<li><a href="https://www.youtube.com/watch?v=e73btaVo868">Cantonese Vs. Mandarin</a></li>
<li><a href="http://popupchinese.com/lessons/absolute-beginners/casual-greetings-in-chinese">Casual Greetings in Chinese</a></li>
</ul>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-1</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/chinese-log-step-1</guid><pubDate>Sun, 17 Jan 2016 22:25:00 GMT</pubDate></item><item><title><![CDATA[My Chinese Learning Log]]></title><description><![CDATA[<p>Welcome to my log! I intend to write here my progress while I learn Chinese from zero.
That means, I will try to track my progress in this post (or list of posts), the tools I
use, the tools I make, my worries and difficulties and what I learn in the process.</p>
<p>I hope I will see in 1 or 2 years to this post and say, well… you did something with
your “free” time.</p>
<p>So, after spending 1 week searching for resources to study Chinese, I came up with this
study plan:</p>
<ol>
<li><a href="/blog/posts/2016/01/en/chinese-log-step-1/">Search for information and read the most I can about the basics of the
language</a>, which means to read: wikipedia,
blogs, books and their commentaries, … (time spent in this step: few days to few
weeks)</li>
<li><a href="/blog/posts/2016/01/en/chinese-log-step-2/">Study pronunciation of Chinese Mandarin</a>,
it’s a tricky language, with many weird sounds (zhi, chi, zi, ci, ji and qi sound
incredibly similar to my ears) and tones. Use pinyin for this. (time spent: few weeks
to one month or two)</li>
<li>Study spoken Chinese with help of written pinyin. Don’t even bother with the written
Chinese, maybe learn some useful characters but not focus on learning them. (time
spent: One year to many! Actually, I think I’ll never go out from this level)</li>
<li>Learn written Chinese, or memorize Characters by means of reading, mainly. Don’t focus
on learning characters isolated, it’s a dumb idea (Chinese characters represent a
sound, a syllable, and many (most?) words in Chinese are compose from 2 or more
syllables).</li>
</ol>
<h2>Measuring my progress</h2>
<p>I will measure my progress on hours using a spread sheet. I don’t wanna use days, because
days are no reliable when talking about a portion of a day in a running time of
months/years (I could study 3 hours one day an only 20 minutes others).</p>
<p>That’s all!, or at least for now, until I know what more to write, and boy, I think I will
write a lot (if not, you know I stopped trying and that I’m really terrible at fulfilling
the goals I give myself)</p>
]]></description><link>https://helq.github.io/blog/posts/2016/01/en/my-chinese-learning-log</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2016/01/en/my-chinese-learning-log</guid><pubDate>Fri, 15 Jan 2016 19:25:00 GMT</pubDate></item><item><title><![CDATA[Deaf Sign Language]]></title><description><![CDATA[<p><em>This article is based in an essay I wrote for an English class in the second semester of
2015</em></p>
<p>The first time I heard somebody was studying Deaf Sign Language was from my auntie. It
seems that the city is giving free classes to learn the Colombian Deaf Sign Language. But
what is a Deaf Sign Language?.</p>
<p>Before searching a little in Internet, I thought that the Deaf Sign Language was a
language constructed mapping words from a Hearing Language, like Spanish, to hand
gestures. This means, I thought, they only use a different set of skills to carry the
words they are making, just like writing requires a different set of skills to what
speaking requires, thus using the same Spanish grammar as I use. So, basically, if you
want to learn Sign Language, I thought, you only need to learn to write or speak again
using a different set of skills, with your hands mainly.</p>
<p>That sounds right, but it isn’t, I was completely WRONG!.</p>
<p>Actually a Deaf Sign Language (DSL) is a completely, usually, unrelated language to the
language the hearing people speak in the same region. I was really surprised to know that
there isn’t <strong>the</strong> “Spanish” DSL but there is a Colombian DSL, a Mexican DSL, a Spanish
DSL</p>
<p>In my mind I had the idea that every deaf person who lives in a country in which Spanish
is the <em>lingua franca</em> should speak the Spanish deaf version of the language with their
hands, but it is a foolish thought. Yes, ‘we’ were conquered by Spain some hundred years
ago, and yes, ‘we’ (my ancestors) were forced to speak Spanish over whatever language they
spoke, and yes, that is the reason why we speak Spanish, and that why so many people speak
Spanish in a so big and sparse place that is Latin America. But none of that counts for
the DSL, because presumably the conquers didn’t speak any sign language or the language
was never transmitted or forced on the people.</p>
<p>Actually the Spanish (from Spain) DSL has its own roots in the French Sign Language from
the mid-19th century, too late to be carried by the conquers to the “new” world. And also,
there is not as much deaf people as there is hearing people, it is difficult to pass a DSL
from one speaker to another, it is difficult to learn/teach any language if the interested
people are spread all over a region in a low density.</p>
<p>In this sense, spoken/written Spanish and the CSL (Colombian Sign Language), or the
whatever other sign language that is used in a region where is Spanish is spoken, are not
necessarily related. Of course, languages borrow words from each other, and sign languages
are no exception, but Sign Languages are not created by individuals, hearing people for
example, and then learn by deaf, they are just like any other language, they develop from
human interaction.</p>
<p>Languages are developed by the people who use them and in the case of the CSL are the
Colombian deaf community who developed it, or in the case of the Spanish Sign Language
(SSL) are the Spanish deaf community who developed it, etc. This means, SSL and CSL are
probably unintelligible because they were not developed from the same people. This does
not mean that all sign languages totally unrelated between each other either, some of them
make groups of languages and thus belong to the same family, just like Spanish, French,
and Italian belong to the same family.</p>
<p>Summarizing, the deaf sign languages are just like regular hearing languages, they have
their own set of rules for the grammar, spelling (though, many borrow the spelling from a
hearing language to reference places or people, a process called fingerspelling),
vocabulary, and they shape or are shaped by the people who use them. And because the deaf
population from a region tend not to interact with deaf people from other regions, the
languages use to develop independently.</p>
<p>My auntie sing up to learn the CSL because she thought learning a deaf language was an
easy task, something which could distract her from the daily stress of work and family,
and it also could be fun. But as you, dear reader, could guess, what she have though to be
an easy task result in an enormous one. She is learning a new foreign language!, and that
requires her giving a lot of her energy into learn a new grammar, vocabulary, and
hand-body skills. She did not know it at the beginning for sure, but she knows it now, and
now she replies that the administration is losing money with her, because she thinks, she
is a bad languages learner.</p>
]]></description><link>https://helq.github.io/blog/posts/2015/12/en/deaf-sign-language</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2015/12/en/deaf-sign-language</guid><pubDate>Sat, 26 Dec 2015 17:40:00 GMT</pubDate></item><item><title><![CDATA[Splitting video or sound in multiple files - ffmpeg [bash script]]]></title><description><![CDATA[<h2><strong>Edit: 2016-08-02</strong></h2>
<p>I found a <a href="http://unix.stackexchange.com/a/283547">simpler, built-in in ffmpeg aproach</a> to split a sound/video file
in multiple parts with the same time length.</p>
<pre><code class="language-bash">ffmpeg -i 'input_file.mp3' \
       -acodec copy -vcodec copy \
       -f segment -segment_time 600 \
       '%03d_out_name.mp3'
</code></pre>
<p>In this example we have an input file called <code>input_file.mp3</code> and we break it in multiple
files of 10 minutes each (600 seconds). Each output file has a unique name of the form:
<code>XXX_out_name.mp3</code> where <code>XXX</code> represent a 3 digit number.</p>
<h2><em>As a reference, the old article:</em></h2>
<p>The present article describes how to split a video/sound into multiple files of same
duration using ffmpeg. <a href="/blog/data/splitVideo.sh">Click to download automated bash script.</a></p>
<p>With ffmpeg, to copy just a fraction of a sound (<code>.mp3</code>, <code>.wma</code>, <code>.aac</code>, …) or video
file (<code>.mp4</code>, <code>.wma</code>, …) use:</p>
<pre><code class="language-bash">ffmpeg -i &quot;$name&quot; -acodec copy -vcodec copy -t $splitLen -ss $start &quot;$new_name&quot;
</code></pre>
<p>where <code>$name</code> is the name of the file to split, <code>$splitLen</code> is the length in seconds of
the split, <code>$start</code> the second in which the splitting start and the <code>$new_name</code> for the
file.</p>
<p>The idea is to copy fractions of the song (or video) in pieces of the same size, so that
adding all the pieces we get the original song (video). Here a bash function that does the
job:</p>
<pre><code class="language-bash">splitVideo() {
    # name file to split
    name=&quot;$1&quot;
    # splitting time in seconds
    splitLen=$2

    # total of the song
    totalTime=&quot;$(ffprobe -i &quot;$name&quot; -show_format 2&gt; /dev/null | sed -n 's/duration=//p')&quot;
    # number of splits required
    numOfSplits=&quot;$(printf '%.0f\n' $[ totalTime / splitLen ])&quot;

    for i in {0..$numOfSplits}; do
        start=$[ splitLen * i ]

        num=$(printf '%02d' $[i+1])
        new_name=&quot;${name%.*}_${num}.${name//*.}&quot;

        ffmpeg -i &quot;$name&quot; -acodec copy -vcodec copy \
               -t $splitLen -ss $start \
               -metadata &quot;track=$[i+1]&quot; \
               &quot;$new_name&quot;
    done
}
</code></pre>
<p>Mode of use: <code>splitVideo &quot;$name_of_the_file&quot; $time_in_seconds</code>, where <code>$time_in_seconds</code>
is the size of the split in seconds, for example, if you put 600 it means 10 minutes.</p>
<p><a href="/blog/data/splitVideo.sh">Here’s the bash script</a>. It is the same code as in the bash function, just in a
bash file ;)</p>
]]></description><link>https://helq.github.io/blog/posts/2015/08/en/splitting-video-or-sound-in-multiple-files-ffmpeg</link><guid isPermaLink="true">https://helq.github.io/blog/posts/2015/08/en/splitting-video-or-sound-in-multiple-files-ffmpeg</guid><pubDate>Sun, 23 Aug 2015 20:12:00 GMT</pubDate></item></channel></rss>